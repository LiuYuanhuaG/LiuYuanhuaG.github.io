<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>手写一个webpack-loader</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="手写一个webpack-loader"><a href="#手写一个webpack-loader" class="headerlink" title="手写一个webpack-loader"></a>手写一个webpack-loader</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── loaders</span><br><span class="line">│   ├── tpl-loader</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── utils.js</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.js</span><br><span class="line">│   └── test.tpl</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&#x27;zh-CN&#x27;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&#x27;app&#x27;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;loader&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.12.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^4.5.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.30.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.30&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.7.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: resolve(__dirname, <span class="string">&#x27;src/app.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">resolveLoader</span>: &#123;</span><br><span class="line">    <span class="attr">modules</span>: [<span class="string">&#x27;node_modules&#x27;</span>, resolve(__dirname, <span class="string">&#x27;loaders&#x27;</span>)]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="comment">// webpack-loader 执行顺序 从后到前</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tpl$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;tpl-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">log</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: resolve(__dirname, <span class="string">&#x27;index.html&#x27;</span>),</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tpl <span class="keyword">from</span> <span class="string">&#x27;./test.tpl&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">app.innerHTML = tpl(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">joke</span>: <span class="string">`如果有来生，要做一只鸟，飞越永恒，没有迷途的苦恼。东方有火红的希望南方有温暖的巢床，向西逐退残阳，向北唤醒芬芳。如果有来生，希望每次相遇，都能化为永恒。`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="test-tpl"><a href="#test-tpl" class="headerlink" title="test.tpl"></a>test.tpl</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;joke&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="tpl-loader-index-js"><a href="#tpl-loader-index-js" class="headerlink" title="tpl-loader/index.js"></a>tpl-loader/index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; tplReplace &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getOptions &#125; = <span class="built_in">require</span>(<span class="string">&#x27;loader-utils&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplLoader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  source = source.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; log &#125; = getOptions(<span class="built_in">this</span>)</span><br><span class="line">  <span class="keyword">const</span> _log = log ? <span class="string">`console.log(&#x27;compiled the file which is from <span class="subst">$&#123;<span class="built_in">this</span>.resourcePath&#125;</span>&#x27;)`</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(log)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    export default (options) =&gt; &#123;</span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;tplReplace.toString()&#125;</span></span></span><br><span class="line"><span class="string">     <span class="subst">$&#123;_log.toString()&#125;</span></span></span><br><span class="line"><span class="string">     return tplReplace(&#x27;<span class="subst">$&#123;source&#125;</span>&#x27;,options)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = tplLoader;</span><br></pre></td></tr></table></figure>

<h3 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tplReplace</span>(<span class="params">template, replaceObject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> template.replace(<span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, <span class="function">(<span class="params">node, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> replaceObject[key]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  tplReplace</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h2><h3 id="know"><a href="#know" class="headerlink" title="know"></a>know</h3><ul>
<li><code>k8s</code>的优点<ul>
<li>高可用，不宕机，自动灾难恢复</li>
<li>灰度更新，不影响业务正常运转 不会一次清除所有的</li>
<li>一键回滚到历史版本</li>
<li>方便的伸缩扩展（应用伸缩，机器加减）、提供负载均衡</li>
<li>有一个完善的生态</li>
</ul>
</li>
<li><code>k8s</code><ul>
<li><code>master</code><ul>
<li>主节点，控制平台，不需要很高性能，不跑任务，通常一个就行了，也可以开多个主节点来提高集群可用度。</li>
</ul>
</li>
<li><code>worker</code><ul>
<li>工作节点，可以是虚拟机或物理计算机，任务都在这里跑，机器性能需要好点；通常都有很多个，可以不断加机器扩大集群；每个工作节点由主节点管理</li>
</ul>
</li>
<li><code>pod</code><ul>
<li>豆荚，<code>K8S</code> 调度、管理的最小单位，一个 <code>Pod</code> 可以包含一个或多个容器，每个 <code>Pod </code>有自己的虚拟<code>IP</code>。一个工作节点可以有多个<code>pod</code>，主节点会考量负载自动调度 <code>pod </code>到哪个节点运行。</li>
</ul>
</li>
</ul>
</li>
<li>工作负载分类<ul>
<li><code>Deployment</code><br>适合无状态应用，所有<code>pod</code>等价，可替代</li>
<li><code>StatefulSet</code><br>有状态的应用，适合数据库这种类型。</li>
<li><code>DaemonSet</code><br>在每个节点上跑一个 <code>Pod</code>，可以用来做节点监控、节点日志收集等</li>
<li><code>Job &amp; CronJob</code><br><code>Job</code> 用来表达的是一次性的任务，而 <code>CronJob</code> 会根据其时间规划反复运行</li>
</ul>
</li>
</ul>
<h3 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h3><ul>
<li><code>kubectl</code> 是一个用来跟 <code>K8S</code> 集群进行交互的命令行工具<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">brew</span> <span class="string">install</span> <span class="string">kubectl</span></span><br><span class="line"><span class="comment"># 查看节点。</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">node</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-1-minikube"><a href="#1-1-minikube" class="headerlink" title="1.1 minikube"></a>1.1 minikube</h3><h3 id="1-2-云服务器安装"><a href="#1-2-云服务器安装" class="headerlink" title="1.2 云服务器安装"></a>1.2 云服务器安装</h3><ul>
<li>可视化操作</li>
<li>登录阿里云控制台 产品搜索 <code>Kubernates</code></li>
<li>选择流量计费测试</li>
<li>环境默认就配置好了</li>
</ul>
<h3 id="1-3-裸机安装"><a href="#1-3-裸机安装" class="headerlink" title="1.3 裸机安装"></a>1.3 裸机安装</h3><ul>
<li>裸机安装 需要两台机器 自己安装k8s组件 </li>
<li>主节点<ul>
<li><code>docker</code></li>
<li><code>kubectl</code></li>
<li><code>kubeadm</code> 集群初始化工具</li>
</ul>
</li>
<li>工作节点<ul>
<li><code>docker</code></li>
<li><code>kubelet</code> 管理<code>Pod</code>和容器</li>
<li><code>kube-proxy</code> 网络代理</li>
</ul>
</li>
</ul>
<h4 id="1-3-1-购买服务器"><a href="#1-3-1-购买服务器" class="headerlink" title="1.3.1 购买服务器"></a>1.3.1 购买服务器</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录自己的公网和内网地址。 下面的这些服务器已经销毁了 只是举例</span></span><br><span class="line"><span class="number">175.27</span><span class="number">.136</span><span class="number">.106</span> master</span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.5</span></span><br><span class="line"><span class="number">119.45</span><span class="number">.27</span><span class="number">.53</span> node1</span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="number">119.45</span><span class="number">.1</span><span class="number">.100</span> node2</span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.7</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-服务器安装启动依赖"><a href="#1-3-2-服务器安装启动依赖" class="headerlink" title="1.3.2 服务器安装启动依赖"></a>1.3.2 服务器安装启动依赖</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每个节点分别设置对应主机名</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="string">set-hostname</span> <span class="string">master</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="string">set-hostname</span> <span class="string">node1</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="string">set-hostname</span> <span class="string">node2</span></span><br><span class="line"><span class="comment"># 内网ip</span></span><br><span class="line"><span class="string">vim</span> <span class="string">/etc/hosts</span></span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.5</span> <span class="string">master</span></span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.2</span> <span class="string">node1</span></span><br><span class="line"><span class="number">10.206</span><span class="number">.0</span><span class="number">.7</span> <span class="string">node2</span></span><br><span class="line"><span class="string">ping</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># 所有服务器关闭 SELinux 和防火墙</span></span><br><span class="line"><span class="string">setenforce</span> <span class="number">0</span></span><br><span class="line"><span class="string">sed</span> <span class="string">-i</span> <span class="string">--follow-symlinks</span> <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> <span class="string">/etc/sysconfig/selinux</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">stop</span> <span class="string">firewalld</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">disable</span> <span class="string">firewalld</span></span><br><span class="line"><span class="comment">#  添加k8s安装源</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">&gt;</span> <span class="string">kubernetes.repo</span></span><br><span class="line">[<span class="string">kubernetes</span>]</span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span> <span class="string">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">mv</span> <span class="string">kubernetes.repo</span> <span class="string">/etc/yum.repos.d/</span></span><br><span class="line"><span class="comment"># docker安装源</span></span><br><span class="line"><span class="string">yum-config-manager</span> <span class="string">--add-repo</span> <span class="string">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># 安装所需组件</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">kubelet</span> <span class="string">kubeadm</span> <span class="string">kubectl</span> <span class="string">docker-ce</span></span><br><span class="line"><span class="comment"># 启动 kubelet、docker，并设置开机启动 所有服务器</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">kubelet</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">kubelet</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">enable</span> <span class="string">docker</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-修改配置"><a href="#1-3-3-修改配置" class="headerlink" title="1.3.3 修改配置"></a>1.3.3 修改配置</h4><ul>
<li><code>kubernetes</code> 官方推荐 <code>docker</code> 等使用 <code>systemd</code> 作为 <code>cgroupdriver</code>，否则 <code>kubelet</code> 启动不了<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 docker 配置（所有节点）</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">&gt;</span> <span class="string">daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;exec-opts&quot;:</span> [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;:</span> [<span class="string">&quot;https://ud6340vz.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">mv</span> <span class="string">daemon.json</span> <span class="string">/etc/docker/</span></span><br><span class="line"><span class="comment"># 重启生效</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">systemctl</span> <span class="string">restart</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="1-3-4-主节点初始化集群"><a href="#1-3-4-主节点初始化集群" class="headerlink" title="1.3.4 主节点初始化集群"></a>1.3.4 主节点初始化集群</h4><ul>
<li><p>用 <code>kubeadm</code> 初始化集群(仅在主节点跑)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化集群控制台 Control plane</span></span><br><span class="line"><span class="comment"># 失败了可以用 kubeadm reset 重置</span></span><br><span class="line"><span class="string">kubeadm</span> <span class="string">init</span> <span class="string">--image-repository=registry.aliyuncs.com/google_containers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记得把 kubeadm join xxx 保存起来</span></span><br><span class="line"><span class="comment"># 忘记了重新获取：kubeadm token create --print-join-command</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制授权文件，以便 kubectl 可以有权限访问集群</span></span><br><span class="line"><span class="comment"># 如果你其他节点需要访问集群，需要从主节点复制这个文件过去其他节点</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">$HOME/.kube</span></span><br><span class="line"><span class="string">cp</span> <span class="string">-i</span> <span class="string">/etc/kubernetes/admin.conf</span> <span class="string">$HOME/.kube/config</span></span><br><span class="line"><span class="string">chown</span> <span class="string">$(id</span> <span class="string">-u):$(id</span> <span class="string">-g)</span> <span class="string">$HOME/.kube/config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在其他机器上创建 ~/.kube/config 文件也能通过 kubectl 访问到集群</span></span><br></pre></td></tr></table></figure></li>
<li><p>把工作节点加入集群（只在工作节点跑）</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">kubeadm</span> <span class="string">join</span> <span class="number">10.206</span><span class="number">.0</span><span class="number">.5</span><span class="string">:6443</span> <span class="string">--token</span> <span class="string">pcwrhg.993ucguu26f8yczo</span> <span class="string">--discovery-token-ca-cert-hash</span> <span class="string">sha256:74c000111a188dcfa6e5f529514f42bd3a8bbe97aa9d696b30d48eb9946abf34</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">node</span></span><br><span class="line"><span class="string">这时候都是notReady</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装网络插件，否则 <code>node</code> 是 <code>NotReady</code> 状态（主节点跑）<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 很有可能国内网络访问不到这个资源，你可以网上找找国内的源安装</span></span><br><span class="line"><span class="comment"># flannel</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-demo"><a href="#2-demo" class="headerlink" title="2. demo"></a>2. demo</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行一个pod 名字是testapp</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">run</span> <span class="string">testapp</span> <span class="string">--image=ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>执行命令 <code>kubectl apply -f app.yaml</code></li>
<li><code>pod.yaml</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 定义容器，可以多个</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-k8s</span> <span class="comment"># 容器名字</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span> <span class="comment"># 镜像</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-kubernetes-常用命令"><a href="#3-kubernetes-常用命令" class="headerlink" title="3. kubernetes 常用命令"></a>3. kubernetes 常用命令</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">app.yaml</span></span><br><span class="line"><span class="comment"># 查看 deployment</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">deployment</span></span><br><span class="line"><span class="comment"># 查看 pod</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pod</span> <span class="string">-o</span> <span class="string">wide</span></span><br><span class="line"><span class="comment"># 查看 pod 详情</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">describe</span> <span class="string">pod</span> <span class="string">podName</span></span><br><span class="line"><span class="comment"># 查看 log 不断查看日志 -f</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">logs</span> <span class="string">podName</span> [<span class="string">-f</span>]</span><br><span class="line"><span class="comment"># 进入 Pod 容器终端， -c container-name 可以指定进入哪个容器</span></span><br><span class="line"><span class="comment"># exit 退出</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">podName</span> <span class="string">--</span> <span class="string">bash</span></span><br><span class="line"><span class="comment"># 伸缩扩展副本</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">scale</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">--replicas=5</span></span><br><span class="line"><span class="comment"># 把集群内端口映射到节点</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">port-forward</span> <span class="string">podName</span> <span class="number">8090</span><span class="string">:8080</span></span><br><span class="line"><span class="comment"># 查看历史</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">history</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 回到上个版本</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">undo</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 回到指定版本</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">undo</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">--to-revision=2</span></span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">delete</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 查看全部</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">all</span></span><br><span class="line"><span class="comment"># 重新部署</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">restart</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 命令修改镜像，--record 表示把这个命令记录到操作历史中</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">set</span> <span class="string">image</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">test-k8s=ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v2-with-error</span> <span class="string">--record</span></span><br><span class="line"><span class="comment"># 暂停运行，暂停后，对 deployment 的修改不会立刻生效，恢复后才应用设置</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">pause</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">rollout</span> <span class="string">resume</span> <span class="string">deployment</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">deployment</span> <span class="string">test-k8s</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;&gt;</span> <span class="string">app2.yaml</span></span><br><span class="line"><span class="comment"># 删除全部资源</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">delete</span> <span class="string">all</span> <span class="string">--all</span></span><br></pre></td></tr></table></figure>

<h2 id="4-service"><a href="#4-service" class="headerlink" title="4.service"></a>4.service</h2><ul>
<li><p><code>service</code></p>
<ul>
<li><code>ClusterIP</code> 默认的，仅在集群内可用</li>
<li><code>NodePort</code><ul>
<li>暴露端口到节点，提供了集群外部访问的入口 端口范围固定 <code>30000 ~ 32767</code></li>
</ul>
</li>
<li><code>LoadBalancer</code><ul>
<li>需要负载均衡器（通常都需要云服务商提供，裸机可以安装 <code>METALLB</code> 测试）</li>
<li>会额外生成一个 <code>IP</code> 对外服务 <code>k8S</code> 支持的负载均衡器：负载均衡器</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Service</code> 通过 <code>label</code> 关联对应的 <code>Pod</code></p>
</li>
<li><p><code>Servcie</code> 生命周期不跟 <code>Pod</code> 绑定，不会因为 <code>Pod</code> 重创改变 <code>IP</code></p>
</li>
<li><p>提供了负载均衡功能，自动转发流量到不同 <code>Pod</code></p>
</li>
<li><p>可对集群外部提供访问端口</p>
</li>
<li><p>集群内部可通过服务名字访问</p>
</li>
</ul>
<h3 id="4-1-yaml"><a href="#4-1-yaml" class="headerlink" title="4.1 yaml"></a>4.1 yaml</h3><ul>
<li><p><code>kubectl get svc</code> 查看服务</p>
</li>
<li><p><code>kubectl describe svc test-k8s</code> 查看服务详情</p>
</li>
<li><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment"># 本 Service 的端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment"># 容器端口</span></span><br><span class="line">      <span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>服务的默认类型是<code>ClusterIP</code>，只能在集群内部访问，我们可以进入到 <code>Pod</code> 里面访问：</p>
<ul>
<li><code>kubectl exec -it pod-name -- bash</code></li>
<li>curl <a href="http://test-k8s:8080/">http://test-k8s:8080</a></li>
</ul>
</li>
<li><p>集群外部访问，可以通过端口转发实现（只适合临时测试用)</p>
<ul>
<li><code>kubectl port-forward service/test-k8s 8888:8080</code></li>
</ul>
</li>
</ul>
<h3 id="4-2-对外暴露服务"><a href="#4-2-对外暴露服务" class="headerlink" title="4.2 对外暴露服务"></a>4.2 对外暴露服务</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="comment"># 默认 ClusterIP 集群内可访问，NodePort 节点可访问，LoadBalancer 负载均衡模式（需要负载均衡器才可用）</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment"># 本 Service 的端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment"># 容器端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31000</span>   <span class="comment"># 节点端口，范围固定 30000 ~ 32767</span></span><br><span class="line"><span class="comment"># curl http://localhost:31000/hello/easydoc</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-多端口"><a href="#4-3-多端口" class="headerlink" title="4.3 多端口"></a>4.3 多端口</h3><ul>
<li>必须配置<code>name</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8080</span>        <span class="comment"># 本 Service 的端口</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-k8s</span>    <span class="comment"># 必须配置</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span>  <span class="comment"># 容器端口</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">31000</span>   <span class="comment"># 节点端口，范围固定 30000 ~ 32767</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">test-other</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8090</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">32000</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5-Deployment"><a href="#5-Deployment" class="headerlink" title="5. Deployment"></a>5. Deployment</h2><ul>
<li><code>Deployment</code> 通过 <code>label</code> 关联起来 <code>Pods</code></li>
</ul>
<h3 id="5-1-yaml"><a href="#5-1-yaml" class="headerlink" title="5.1 yaml"></a>5.1 yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 部署名字</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-k8s</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 要运行的Pod数量</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># 用来查找关联的 Pod，所有标签都匹配才行</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="comment"># 自己定义的 随便写</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">  <span class="comment"># 定义 Pod 相关数据</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">test-k8s</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># 定义容器，可以多个</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-k8s</span> <span class="comment"># 容器名字</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span> <span class="comment"># 镜像</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-pod报错"><a href="#5-2-pod报错" class="headerlink" title="5.2 pod报错"></a>5.2 pod报错</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你运行 kubectl describe pod/pod-name 发现 Events 中有下面这个错误</span></span><br><span class="line"><span class="string">networkPlugin</span> <span class="string">cni</span> <span class="string">failed</span> <span class="string">to</span> <span class="string">set</span> <span class="string">up</span> <span class="string">pod</span> <span class="string">&quot;test-k8s-68bb74d654-mc6b9_default&quot;</span> <span class="attr">network: open /run/flannel/subnet.env:</span> <span class="literal">no</span> <span class="string">such</span> <span class="string">file</span> <span class="string">or</span> <span class="string">directory</span></span><br><span class="line"><span class="comment"># 在每个节点创建文件/run/flannel/subnet.env写入以下内容即可解决</span></span><br><span class="line"><span class="string">vim</span> <span class="string">/run/flannel/subnet.env</span></span><br><span class="line"><span class="string">FLANNEL_NETWORK=10.244.0.0/16</span></span><br><span class="line"><span class="string">FLANNEL_SUBNET=10.244.0.1/24</span></span><br><span class="line"><span class="string">FLANNEL_MTU=1450</span></span><br><span class="line"><span class="string">FLANNEL_IPMASQ=true</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-将Pod指定到某个节点运行"><a href="#5-3-将Pod指定到某个节点运行" class="headerlink" title="5.3 将Pod指定到某个节点运行"></a>5.3 将Pod指定到某个节点运行</h3><ul>
<li><a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector">将 Pod 分配给节点</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/policy/resource-quotas/#%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90%E9%85%8D%E9%A2%9D">计算资源配额</a><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6-StatefulSet"><a href="#6-StatefulSet" class="headerlink" title="6. StatefulSet"></a>6. StatefulSet</h2><h3 id="6-1-MongoDB"><a href="#6-1-MongoDB" class="headerlink" title="6.1 MongoDB"></a>6.1 MongoDB</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:4.4</span></span><br><span class="line">          <span class="comment"># IfNotPresent 仅本地没有镜像时才远程拉，Always 永远都是从远程拉，Never 永远只用本地镜像，本地没有则报错</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="comment"># HeadLess</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">27017</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-hostPath"><a href="#6-2-hostPath" class="headerlink" title="6.2 hostPath"></a>6.2 hostPath</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:4.4</span></span><br><span class="line">          <span class="comment"># IfNotPresent 仅本地没有镜像时才远程拉，Always 永远都是从远程拉，Never 永远只用本地镜像，本地没有则报错</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/db</span> <span class="comment"># 容器里面的挂载路径</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mongo-data</span>    <span class="comment"># 卷名字，必须跟下面定义的名字一致</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo-data</span>              <span class="comment"># 卷名字</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/mongo-data</span>      <span class="comment"># 节点上的路径</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span>     <span class="comment"># 指向一个目录，不存在时自动创建</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-Storage-Class-SC"><a href="#6-3-Storage-Class-SC" class="headerlink" title="6.3 Storage Class (SC)"></a>6.3 Storage Class (SC)</h3><ul>
<li>将存储卷划分为不同的种类，例如：SSD，普通磁盘，本地磁盘，按需使用。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slow</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/aws-ebs</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">io1</span></span><br><span class="line">  <span class="attr">iopsPerGB:</span> <span class="string">&quot;10&quot;</span></span><br><span class="line">  <span class="attr">fsType:</span> <span class="string">ext4</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-4-Persistent-Volume-PV"><a href="#6-4-Persistent-Volume-PV" class="headerlink" title="6.4 Persistent Volume (PV)"></a>6.4 Persistent Volume (PV)</h3><ul>
<li>描述卷的具体信息，例如磁盘大小，访问模式。文档，类型<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span>  <span class="comment"># Filesystem（文件系统） Block（块）</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>       <span class="comment"># 卷可以被一个节点以读写方式挂载</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="comment"># 通过 hostname 限定在某个节点创建存储卷</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-5-Persistent-Volume-Claim-PVC"><a href="#6-5-Persistent-Volume-Claim-PVC" class="headerlink" title="6.5 Persistent Volume Claim (PVC)"></a>6.5 Persistent Volume Claim (PVC)</h3><ul>
<li>对存储需求的一个申明，可以理解为一个申请单，系统根据这个申请单去找一个合适的 <code>PV</code></li>
<li>还可以根据 <code>PVC</code> 自动创建 <code>PV</code>。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;local-storage&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-6-动态卷"><a href="#6-6-动态卷" class="headerlink" title="6.6 动态卷"></a>6.6 动态卷</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mongo:5.0</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/data/db</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mongo-data</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo-data</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">             <span class="attr">claimName:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">local-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/no-provisioner</span></span><br><span class="line"><span class="attr">volumeBindingMode:</span> <span class="string">WaitForFirstConsumer</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">2Gi</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span>  <span class="comment"># Filesystem（文件系统） Block（块）</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span>       <span class="comment"># 卷可以被一个节点以读写方式挂载</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Delete</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">local-storage</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/root/data</span></span><br><span class="line">  <span class="attr">nodeAffinity:</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="comment"># 通过 hostname 限定在某个节点创建存储卷</span></span><br><span class="line">      <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">              <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">              <span class="attr">values:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">node2</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span> [<span class="string">&quot;ReadWriteOnce&quot;</span>]</span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;local-storage&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure>

<h2 id="7-ConfigMap-amp-Secret"><a href="#7-ConfigMap-amp-Secret" class="headerlink" title="7. ConfigMap &amp; Secret"></a>7. ConfigMap &amp; Secret</h2><h3 id="7-1-ConfigMap"><a href="#7-1-ConfigMap" class="headerlink" title="7.1 ConfigMap"></a>7.1 ConfigMap</h3><ul>
<li><code>ConfigMap</code>，可以方便的配置一些变量<ul>
<li>数据库密码 链接地址 …<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-config</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">mongoHost:</span> <span class="string">mongodb-0.mongodb</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">configmap.yaml</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">configmap</span> <span class="string">mongo-config</span> <span class="string">-o</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="7-2-Secret"><a href="#7-2-Secret" class="headerlink" title="7.2 Secret"></a>7.2 Secret</h3><ul>
<li>一些重要数据，例如密码、<code>TOKEN</code>，我们可以放到 <code>secret</code> 中</li>
<li>注意，数据要进行 <code>Base64</code> 编码<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line"><span class="comment"># Opaque 用户定义的任意数据，更多类型介绍 https://kubernetes.io/zh/docs/concepts/configuration/secret/#secret-types</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># 数据要 base64。https://tools.fun/base64.html</span></span><br><span class="line">  <span class="attr">mongo-username:</span> <span class="string">bW9uZ291c2Vy</span></span><br><span class="line">  <span class="attr">mongo-password:</span> <span class="string">bW9uZ29wYXNz</span></span><br><span class="line"><span class="comment"># 应用</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">secret.yaml</span></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">secret</span> <span class="string">mongo-secret</span> <span class="string">-o</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure></li>
<li>使用方法<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongo</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">mongo:4.4</span></span><br><span class="line">          <span class="comment"># IfNotPresent 仅本地没有镜像时才远程拉，Always 永远都是从远程拉，Never 永远只用本地镜像，本地没有则报错</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGO_INITDB_ROOT_USERNAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">mongo-username</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">secretKeyRef:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">                <span class="attr">key:</span> <span class="string">mongo-password</span></span><br><span class="line">          <span class="comment"># Secret 的所有数据定义为容器的环境变量，Secret 中的键名称为 Pod 中的环境变量名称</span></span><br><span class="line">          <span class="comment"># envFrom:</span></span><br><span class="line">          <span class="comment"># - secretRef:</span></span><br><span class="line">          <span class="comment">#     name: mongo-secret</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7-3-挂载为文件"><a href="#7-3-挂载为文件" class="headerlink" title="7.3 挂载为文件"></a>7.3 挂载为文件</h3><ul>
<li>更适合证书文件</li>
<li>挂载后，会在容器中对应路径生成文件，一个 key 一个文件，内容就是 value<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mypod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">&quot;/etc/foo&quot;</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">foo</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">mysecret</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-Helm-amp-命名空间"><a href="#8-Helm-amp-命名空间" class="headerlink" title="8. Helm &amp; 命名空间"></a>8. Helm &amp; 命名空间</h2><ul>
<li><code>Helm</code>类似 <code>npm，pip，docker hub</code>, 可以理解为是一个软件库，可以方便快速的为我们的集群安装一些第三方软件。</li>
<li>使用 <code>Helm</code> 我们可以非常方便的就搭建出来 <code>MongoDB / MySQL</code> 副本集群，<code>YAML</code> 文件别人都给我们写好了，直接使用</li>
</ul>
<h3 id="8-1-安装"><a href="#8-1-安装" class="headerlink" title="8.1 安装"></a>8.1 安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">curl https:<span class="comment">//raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash</span></span><br></pre></td></tr></table></figure>

<h3 id="8-2-安装MongoDB"><a href="#8-2-安装MongoDB" class="headerlink" title="8.2 安装MongoDB"></a>8.2 安装MongoDB</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="string">helm</span> <span class="string">repo</span> <span class="string">add</span> <span class="string">bitnami</span> <span class="string">https://charts.bitnami.com/bitnami</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">my-mongo</span> <span class="string">bitnami/mongodb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定密码和架构</span></span><br><span class="line"><span class="string">helm</span> <span class="string">install</span> <span class="string">my-mongo</span> <span class="string">bitnami/mongodb</span> <span class="string">--set</span> <span class="string">architecture=&quot;replicaset&quot;,auth.rootPassword=&quot;mongopass&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="string">helm</span> <span class="string">ls</span></span><br><span class="line"><span class="string">heml</span> <span class="string">delete</span> <span class="string">my-mongo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">secret</span> <span class="string">my-mongo-mongodb</span> <span class="string">-o</span> <span class="string">json</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">secret</span> <span class="string">my-mongo-mongodb</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;</span> <span class="string">secret.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时运行一个包含 mongo client 的 debian 系统</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">run</span> <span class="string">mongodb-client</span> <span class="string">--rm</span> <span class="string">--tty</span> <span class="string">-i</span> <span class="string">--restart=&#x27;Never&#x27;</span> <span class="string">--image</span> <span class="string">docker.io/bitnami/mongodb:4.4.10-debian-10-r20</span> <span class="string">--command</span> <span class="string">--</span> <span class="string">bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进去 mongodb</span></span><br><span class="line"><span class="string">mongo</span> <span class="string">--host</span> <span class="string">&quot;my-mongo-mongodb&quot;</span> <span class="string">-u</span> <span class="string">root</span> <span class="string">-p</span> <span class="string">mongopass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以转发集群里的端口到宿主机访问 mongodb</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">port-forward</span> <span class="string">svc/my-mongo-mongodb</span> <span class="number">27017</span><span class="string">:27018</span></span><br></pre></td></tr></table></figure>
<h3 id="8-3-命名空间"><a href="#8-3-命名空间" class="headerlink" title="8.3 命名空间"></a>8.3 命名空间</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">create</span> <span class="string">namespace</span> <span class="string">testapp</span></span><br><span class="line"><span class="comment"># 部署应用到指定的命名空间</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">app.yml</span> <span class="string">--namespace</span> <span class="string">testapp</span></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="string">kubectl</span> <span class="string">get</span> <span class="string">pod</span> <span class="string">--namespace</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用 kubens 快速切换 namespace</span></span><br><span class="line"><span class="comment"># 切换命名空间</span></span><br><span class="line"><span class="string">kubens</span> <span class="string">kube-system</span></span><br><span class="line"><span class="comment"># 回到上个命名空间</span></span><br><span class="line"><span class="string">kubens</span> <span class="bullet">-</span></span><br><span class="line"><span class="comment"># 切换集群</span></span><br><span class="line"><span class="string">kubectx</span> <span class="string">minikube</span></span><br></pre></td></tr></table></figure>

<h2 id="9-Ingress"><a href="#9-Ingress" class="headerlink" title="9. Ingress"></a>9. Ingress</h2><ul>
<li><code>ngress</code> 为外部访问集群提供了一个 统一 入口，避免了对外暴露集群端口；<ul>
<li>功能类似 <code>Nginx</code>，可以根据域名、路径把请求转发到不同的 <code>Service</code>。</li>
<li>可以配置 <code>https</code></li>
</ul>
</li>
<li>跟 <code>LoadBalancer</code> 有什么区别？<ul>
<li><code>LoadBalancer</code> 需要对外暴露端口，不安全；</li>
<li>无法根据域名、路径转发流量到不同 <code>Service</code>，多个 <code>Service</code> 则需要开多个 <code>LoadBalancer；</code></li>
<li>功能单一，无法配置 <code>https</code></li>
</ul>
</li>
<li>云服务会自动配置 可视化配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple-example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">tools.fun</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/easydoc</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">4200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/svnbucket</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service2</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="10-链接"><a href="#10-链接" class="headerlink" title="10. 链接"></a>10. 链接</h2><p><a href="https://github.com/lework/kainstall">用脚本搭建集群</a></p>
]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>手写axios</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>这里主要实现了 <ul>
<li>构建<code>axios</code>对象和函数</li>
<li>发送网络请求:<code>ajax</code></li>
<li>拦截器</li>
<li>适配器</li>
<li><code>CancolToken</code>功能</li>
</ul>
</li>
</ul>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><ul>
<li>这里直接使用<code>esmodule</code>, 需要注意<code>import</code>时候不能省略 <code>.js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span> 发送请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// fetch(&#x27;./db.json&#x27;).then(async (res) =&gt; console.log(await res.json()))</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">config</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">config</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        cancel();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> axios.CancelToken(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123; cancel = c &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      axios(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// url: &#x27;./db.json&#x27;,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">cancelToken</span>: cancelToken</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(response.data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ul>
<li>导出构造函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./Axios.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Axios-js"><a href="#Axios-js" class="headerlink" title="Axios.js"></a>Axios.js</h3><ul>
<li>构建了<code>Axios</code>的类,并创造了他的实例对象</li>
<li>此时就可以 <code>axios.get</code> or <code>axios(&#123;method:&quot;GET&quot;&#125;)</code> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;./request.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CancelToken &#125; <span class="keyword">from</span> <span class="string">&#x27;./CancelToken.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; InterceptorManager &#125; <span class="keyword">from</span> <span class="string">&#x27;./interceptor.js&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Axios</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaults = config;</span><br><span class="line">    <span class="built_in">this</span>.interceptors = &#123;</span><br><span class="line">      <span class="attr">request</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">      <span class="attr">response</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">request</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.call(<span class="built_in">this</span>, config)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context = <span class="keyword">new</span> Axios(config);</span><br><span class="line">  <span class="keyword">let</span> instance = Axios.prototype.request.bind(context);</span><br><span class="line">  <span class="keyword">let</span> functionNamesArray = <span class="built_in">Object</span>.getOwnPropertyNames(Axios.prototype)</span><br><span class="line">  functionNamesArray.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    instance[item] = Axios.prototype[item].bind(context)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">Object</span>.keys(context).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    instance[key] = context[key];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> axios = createInstance()</span><br><span class="line">axios.CancelToken = CancelToken</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="dispatchRequest-js"><a href="#dispatchRequest-js" class="headerlink" title="dispatchRequest.js"></a>dispatchRequest.js</h3><ul>
<li>这里用于调用适配器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; xhrAdapter &#125; <span class="keyword">from</span> <span class="string">&#x27;./xhrAdapter.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xhrAdapter(config).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="xhrAdapter-js"><a href="#xhrAdapter-js" class="headerlink" title="xhrAdapter.js"></a>xhrAdapter.js</h3><ul>
<li>适配器:用于切换使用 <code>node</code> 版本还是 <code>js</code> 版本</li>
<li>这里指写了 <code>js</code> 版本<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">xhrAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(config.method, config.url);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">          resolve(&#123;</span><br><span class="line">            <span class="attr">config</span>: config,</span><br><span class="line">            <span class="attr">data</span>: xhr.responseText,</span><br><span class="line">            <span class="attr">headers</span>: xhr.getAllResponseHeaders(),</span><br><span class="line">            <span class="attr">request</span>: xhr,</span><br><span class="line">            <span class="attr">status</span>: xhr.status,</span><br><span class="line">            <span class="attr">statusText</span>: xhr.statusText</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败 失败的状态码为&#x27;</span> + xhr.status));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">      config.cancelToken.promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        xhr.abort();</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求已经被取消&#x27;</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="interceptor-js"><a href="#interceptor-js" class="headerlink" title="interceptor.js"></a>interceptor.js</h3><ul>
<li>拦截器的实例对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorManager</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">fulfilled, rejected</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers.push(&#123; fulfilled, rejected &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h3><ul>
<li>这里是关于拦截器的核心代码</li>
<li>可以看出是用一个数组维护 响应拦截器 和 请求拦截器</li>
<li>放的时候 请求拦截器 <code>unshift</code> , 相应拦截器 <code>push</code></li>
<li>取的时候 请求拦截器 <code>shift</code> , 相应拦截器 <code>shift</code></li>
<li>因此当多个拦截器执行的时候 请求拦截器的顺序是反的 相应拦截器的正的<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dispatchRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;./dispatchRequest.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line">  <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">  <span class="built_in">this</span>.interceptors.request.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.unshift(item.fulfilled, item.rejected)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.interceptors.response.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.push(item.fulfilled, item.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">while</span> (chains.length) &#123;</span><br><span class="line">    promise = promise.then(chains.shift(), chains.shift());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="CancelToken-js"><a href="#CancelToken-js" class="headerlink" title="CancelToken.js"></a>CancelToken.js</h3><ul>
<li>闭包的经典应用</li>
<li>将<code>promise</code>的控制权交于外界 使用者控制</li>
<li>使用者一旦调用方法 <code>promise</code>就可以自动触发 <code>promise.resolve</code></li>
<li>随后只要在 <code>xhr</code> 网络请求中 调用 <code>xhr.abort()</code> 来中断请求<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">CancelToken</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolvePromise = resolve</span><br><span class="line">  &#125;);</span><br><span class="line">  executor(<span class="function">() =&gt;</span> resolvePromise());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/eternallycyf/eternallcyf-axios">上述代码的仓库</a></li>
<li><a href="https://github.com/axios/axios">axios</a></li>
<li><a href="https://axios-http.com/zh/">axios-doc</a></li>
</ul>
]]></content>
      <categories>
        <category>soundCode</category>
      </categories>
      <tags>
        <tag>soundCode</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactNative遇到的深坑和搭建项目建构</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1.导读"></a>1.导读</h2><ul>
<li>在搭建 <code>React Native</code> 的途中真的是遇到太多问题了</li>
<li>。。。这里记录一下</li>
<li>使用的操作系统是 <code>Macos Monterey</code></li>
<li>可以直接克隆我的仓库 修改成自己的架构<ul>
<li><a href="https://github.com/eternallycyf/react-native-dva-template">仓库地址</a></li>
<li>已经集成了 <ul>
<li>antd/react-native </li>
<li>dva </li>
<li>axios </li>
<li>react-native-config (区分开发环境)</li>
<li>eslint</li>
<li>typescript</li>
<li>reactnavigation (路由导航)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-bug汇总"><a href="#2-bug汇总" class="headerlink" title="2.bug汇总"></a>2.bug汇总</h2><ul>
<li>先进行下一步,遇到问题再回来看看</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 搭建环境下载依赖一直失败</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.react-native.cn/docs/environment-setup</span></span><br><span class="line"># yarn ios 运行模拟器时候没有 app</span><br><span class="line"><span class="comment">// 需要给权限</span></span><br><span class="line">sudo chown -R eternallycyf ~/react_native_project</span><br><span class="line">chmod <span class="number">777</span> RN</span><br><span class="line"># 运行报错</span><br><span class="line"><span class="comment">// 端口在运行了 杀下端口</span></span><br><span class="line"></span><br><span class="line"># react native <span class="keyword">debugger</span> 显示一片空白</span><br><span class="line"><span class="comment">// react-devtools 版本冲突 请卸载全局 react-devtools</span></span><br><span class="line"><span class="comment">// 并按照react native debugger 页面提示的版本 安装</span></span><br><span class="line"><span class="comment">// npm i -g react-devtools@^4.13.0</span></span><br><span class="line"><span class="comment">// github 有 issue</span></span><br><span class="line"># react native <span class="keyword">debugger</span> 网络请求不显示</span><br><span class="line"><span class="comment">// 他这个需要先手动 在 element页面 右键点击 enable network 开启</span></span><br><span class="line"></span><br><span class="line"># npm加入其他包的时候请重新 pod install 或者直接重新运行打包</span><br><span class="line"></span><br><span class="line"># react-native-config ios配置成功 安卓config是一个空对象或者一个杂乱的对象</span><br><span class="line"><span class="comment">// 请确定 </span></span><br><span class="line"><span class="comment">// 1. android/app/build.gradle 设置了 resValue &quot;string&quot;, &quot;build_config_package&quot;, &quot;com.rn&quot;</span></span><br><span class="line"><span class="comment">//                                   (他的值不是固定的 是另一个文件里的字段)</span></span><br><span class="line"><span class="comment">// 2. android/app/src/main/AndroidManifest.xml &lt;manifest package=&quot;com.rn&quot;&gt;  </span></span><br><span class="line"><span class="comment">// 其实这个就在npm首页有写 当时我也没有看到 找了很久 。。。</span></span><br></pre></td></tr></table></figure>

<h2 id="3-准备阶段"><a href="#3-准备阶段" class="headerlink" title="3.准备阶段"></a>3.准备阶段</h2><h3 id="基本环境的安装"><a href="#基本环境的安装" class="headerlink" title="基本环境的安装"></a>基本环境的安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br><span class="line">npx react-native init RN --template react-native-template-typescript</span><br><span class="line">yarn android </span><br><span class="line">yarn ios</span><br><span class="line"># 具体流程: 参考官网</span><br><span class="line"><span class="comment">// 按着官网的先一部一部来 把基础必备的东西先装了 </span></span><br><span class="line"><span class="comment">// 例如: Xcode Watchman Node CocoaPods</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.react-native.cn/docs/environment-setup</span></span><br><span class="line"># 安装过程中遇到的问题: 指定镜像(必须 或者自己代理)</span><br><span class="line"><span class="comment">// 参考这篇文章 基本解决的搭建环境的所有问题</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.jianshu.com/p/412d760bcacd</span></span><br></pre></td></tr></table></figure>

<h3 id="Android模拟器"><a href="#Android模拟器" class="headerlink" title="Android模拟器"></a>Android模拟器</h3><ul>
<li>这里就不提这个了</li>
<li>按照官网一步一步操作 &amp;&amp; 有一个梯子 不然下载应用网站打不开 或者找第三方的地方下载</li>
<li>其次 配置环境变量时 <code>open ~/.bash_profile </code> 或  <code>open ~/.zshrc</code> 打不开<ul>
<li>可能是自己电脑之前配置有问题 </li>
<li>用这个命令打开 <code>open -e ~/.bash_profile</code></li>
</ul>
</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h4><ul>
<li>我这里最终搭建的体系是采用 <code>react-native-debugger</code> 和 <code>ios</code>模拟器结合<ul>
<li><code>react-native-debugger 集成了 console.log network redux</code> 调试工具等功能</li>
<li><code>ios</code> 模拟器 支持提示错误 元素审查 等功能</li>
<li>基本满足调试的所有需要了 </li>
</ul>
</li>
<li><img class="inline-img" src="https://user-images.githubusercontent.com/3001525/29451479-6621bf1a-83c8-11e7-8ebb-b4e98b1af91c.png" style="height:300px"/></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># brew install --cask react-native-<span class="keyword">debugger</span></span><br><span class="line">然后直接打开应用就行 <span class="comment">// 注意他直接是一个应用 不是直接运行在浏览器的</span></span><br></pre></td></tr></table></figure>

<h4 id="调试如何使用"><a href="#调试如何使用" class="headerlink" title="调试如何使用"></a>调试如何使用</h4><blockquote>在调试中遇到的bug我统一放在第二章说明了,有问题话往前翻</blockquote>

<ul>
<li>刷新模拟器:两种方法<ul>
<li>1.按两下 <code>R || r</code> 快速刷新</li>
<li>2.手动在模拟器操作<ul>
<li><code>ios: command+R || command+D  =&gt; reload</code></li>
<li><code>android: command + m reload</code> (模拟器在 应用 <code>=&gt; avd =&gt; manager</code>里面)</li>
</ul>
</li>
</ul>
</li>
<li>审查元素<ul>
<li><code>commend+d</code></li>
<li><code>show Inspector</code></li>
<li>点击元素</li>
</ul>
</li>
<li><code>console.log</code><ul>
<li>1.直接使用 <code>react-native-debugger</code> 调试工具<code>console.log</code> 界面就能看到了</li>
<li>2.运行模拟器的终端</li>
<li>3.<code>command+D</code><ul>
<li><code>Debug with Chrome</code></li>
<li>切换到<code>console</code>界面</li>
<li>将<code>top</code>切换为 <code>debug...</code></li>
</ul>
</li>
</ul>
</li>
<li>网络请求<ul>
<li><code>react native debugger</code></li>
<li>在 <code>Element</code> 页面 右键开启 <code>enable network</code></li>
<li>然后在 <code>network</code> 页面刷新就能看到网络请求了</li>
</ul>
</li>
<li><code>redux|dva</code><ul>
<li>在<code>react native debugger</code> 页面就能看到了</li>
</ul>
</li>
</ul>
<h4 id="其他调试方案单独步骤"><a href="#其他调试方案单独步骤" class="headerlink" title="其他调试方案单独步骤"></a>其他调试方案单独步骤</h4><blockquote>如果按照react-native-debugger方案,不需要看这里的内容,直接跳过</blockquote>

<h5 id="ts语法提示"><a href="#ts语法提示" class="headerlink" title="ts语法提示"></a>ts语法提示</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save @types/react-native</span><br><span class="line"><span class="comment">// 根目录构建tsconfig.json文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es6&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;metro.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jest.config.js&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vscode 安装 react native tools 插件</span></span><br><span class="line"><span class="comment">// 打开vscode开发者工具 就可以看到网络请求了</span></span><br></pre></td></tr></table></figure>

<h5 id="react调试工具"><a href="#react调试工具" class="headerlink" title="react调试工具"></a>react调试工具</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm i -g react-devtools@^4.13.0</span></span><br><span class="line"><span class="comment">// 终端输入命令 react-devtools</span></span><br><span class="line"><span class="comment">// 在模拟器刷新后 react-devtools 就有内容了</span></span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__tests__</span><br><span class="line">.bundle</span><br><span class="line">android</span><br><span class="line">ios</span><br><span class="line">node_modules</span><br><span class="line">.buckconfig</span><br><span class="line">.flowconfig</span><br><span class="line">.ruby-version</span><br><span class="line">.watchmanconfig</span><br><span class="line">App.js</span><br><span class="line">app.json</span><br><span class="line">babel.config.js</span><br><span class="line">Gemfile</span><br><span class="line">Gemfile.lock</span><br><span class="line">index.js</span><br><span class="line">metro.config.js</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>

<h2 id="4-插件集成"><a href="#4-插件集成" class="headerlink" title="4. 插件集成"></a>4. 插件集成</h2><h3 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add dva-core-ts react-redux @types/react-redux</span><br><span class="line"><span class="comment">// 随后引入dva就可以了</span></span><br><span class="line"><span class="keyword">import</span> &#123;create, Model&#125; <span class="keyword">from</span> <span class="string">&#x27;dva-core-ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createLoading <span class="keyword">from</span> <span class="string">&#x27;dva-loading-ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> models <span class="keyword">from</span> <span class="string">&#x27;@/models/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/config/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> home, &#123;HomeModelType&#125; <span class="keyword">from</span> <span class="string">&#x27;@/models/home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Animated&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modelExtend = <span class="built_in">require</span>(<span class="string">&#x27;dva-model-extend&#x27;</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = create(&#123;</span><br><span class="line">  <span class="attr">onError</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2.加载model对象</span></span><br><span class="line">models.forEach(<span class="function"><span class="params">model</span> =&gt;</span> &#123;</span><br><span class="line">  app.model(model);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(createLoading());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.启动dva</span></span><br><span class="line">app.start();</span><br><span class="line"><span class="comment">// 4.导出dva的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app._store;</span><br><span class="line"></span><br><span class="line">interface Cached &#123;</span><br><span class="line">  [key: string]: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cached: Cached = &#123;</span><br><span class="line">  <span class="attr">home</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerModel</span>(<span class="params">model: Model</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cached[model.namespace]) &#123;</span><br><span class="line">    app.model(model);</span><br><span class="line">    cached[model.namespace] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createModel</span>(<span class="params">namespace: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> model: HomeModelType = modelExtend(home, &#123;</span><br><span class="line">    namespace,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="attr">scrollValue</span>: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  registerModel(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-native-config"><a href="#react-native-config" class="headerlink" title="react-native-config"></a>react-native-config</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区分多环境 需要重新打包</span></span><br><span class="line">yarn add react-native-config</span><br><span class="line"># 配置 参考Npm官网就可以了 </span><br><span class="line"><span class="comment">// 如果 ios 可以显示 , android 打印结果为空对象或者一个对象里有一堆无关的数据</span></span><br><span class="line"><span class="comment">// 请确定自己正确配置了 resValue  这个值是另一个文件中的变量</span></span><br><span class="line"><span class="comment">// 这里的 bug 解决方式放在最前面了</span></span><br><span class="line">...</span><br><span class="line">npx react-native link react-native-config</span><br><span class="line"># 根目录新建 .env</span><br><span class="line">API_URL=https:<span class="comment">//myapi.com</span></span><br><span class="line"># App.tsx</span><br><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">&#x27;react-native-config&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="babel-plugin-module-resolve"><a href="#babel-plugin-module-resolve" class="headerlink" title="babel-plugin-module-resolve"></a>babel-plugin-module-resolve</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add babel-plugin-<span class="built_in">module</span>-resolver</span><br><span class="line"># babel.config.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;module:metro-react-native-babel-preset&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;module-resolver&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">root</span>: [<span class="string">&#x27;./src&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;@/utils&#x27;</span>: <span class="string">&#x27;./src/utils&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/pages&#x27;</span>: <span class="string">&#x27;./src/pages&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/navigator&#x27;</span>: <span class="string">&#x27;./src/navigator&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/models&#x27;</span>: <span class="string">&#x27;./src/models&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/config&#x27;</span>: <span class="string">&#x27;./src/config&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/components&#x27;</span>: <span class="string">&#x27;./src/components&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/assets&#x27;</span>: <span class="string">&#x27;./src/assets&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"># tsconfig.json</span><br><span class="line"> <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./src&quot;</span>,                      </span><br><span class="line"> <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/assets/*&quot;</span>: [<span class="string">&quot;assets/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/components/*&quot;</span>: [<span class="string">&quot;components/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/config/*&quot;</span>: [<span class="string">&quot;config/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/models/*&quot;</span>: [<span class="string">&quot;models/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/navigator/*&quot;</span>: [<span class="string">&quot;navigator/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/pages/*&quot;</span>: [<span class="string">&quot;pages/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/utils/*&quot;</span>: [<span class="string">&quot;utils/*&quot;</span>]</span><br><span class="line"> &#125;,       </span><br></pre></td></tr></table></figure>

<h3 id="antd-reactNative"><a href="#antd-reactNative" class="headerlink" title="antd/reactNative"></a>antd/reactNative</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; View, Text, Button &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Icon &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/react-native&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="React-Navigation"><a href="#React-Navigation" class="headerlink" title="React Navigation"></a>React Navigation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">这个直接参考官方文档就可以了 我没有遇到什么问题</span><br><span class="line">只是有些API有版本问题</span><br></pre></td></tr></table></figure>

<h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><ul>
<li><a href="https://www.react-native.cn/docs/environment-setup">ReactNative#官网搭建开发环境文档</a></li>
<li><a href="https://www.jianshu.com/p/412d760bcacd">搭建环境问题的解决</a></li>
<li><a href="https://github.com/eternallycyf/react-native-dva-template">我的reactNative项目模板仓库</a></li>
<li><a href="https://dvajs.com/guide/#%E7%89%B9%E6%80%A7">dva</a></li>
<li><a href="https://www.npmjs.com/package/react-native-config">react-native-config</a></li>
<li><a href="https://www.npmjs.com/package/babel-plugin-module-resolve">babel-plugin-module-resolve</a></li>
<li><a href="https://rn.mobile.ant.design/index-cn">antd-RN</a></li>
<li><a href="https://reactnavigation.org/">React Navigation</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>ReactNative</tag>
      </tags>
  </entry>
  <entry>
    <title>自己做一个脚手架</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="为什么需要一个脚手架"><a href="#为什么需要一个脚手架" class="headerlink" title="为什么需要一个脚手架"></a>为什么需要一个脚手架</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">呃。。。为了方便copy</span><br><span class="line">哈哈。为了方便自己克隆自己的仓库。顺便了解下脚手架是如何制作的</span><br><span class="line">在这里做一个克隆自己仓库的脚手架</span><br><span class="line">还是非常简单的。只需要克隆我的脚手架文件。换成自己定义的名字</span><br><span class="line">npm发布下就可以用了</span><br><span class="line">废话不多说,开始正题了。</span><br></pre></td></tr></table></figure>

<h2 id="1-克隆基本代码"><a href="#1-克隆基本代码" class="headerlink" title="1.克隆基本代码"></a>1.克隆基本代码</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/eternallycyf/</span>lrxc-cli.git</span><br></pre></td></tr></table></figure>

<h2 id="2-更改api查询名称"><a href="#2-更改api查询名称" class="headerlink" title="2.更改api查询名称"></a>2.更改<code>api</code>查询名称</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里是调用的github的api 查询自己的仓库信息</span></span><br><span class="line"># ./src/create.js</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://api.github.com/users/eternallycyf/repos&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">`https://api.github.com/repos/eternallycyf/<span class="subst">$&#123;repo&#125;</span>/tags`</span>);</span><br><span class="line">  <span class="keyword">let</span> api = <span class="string">`eternallycyf/<span class="subst">$&#123;repo&#125;</span>`</span></span><br><span class="line">  将这三行的eternallycyf换成自己github的名字</span><br></pre></td></tr></table></figure>

<h2 id="3-更换提示信息"><a href="#3-更换提示信息" class="headerlink" title="3.更换提示信息"></a>3.更换提示信息</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./src/main.js </span><br><span class="line">将 lrxc-cli 换成自己脚手架的名字</span><br></pre></td></tr></table></figure>

<h2 id="4-设置-package-json"><a href="#4-设置-package-json" class="headerlink" title="4.设置 package.json"></a>4.设置 <code>package.json</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 将这些<span class="built_in">JSON</span>展示字段的value换成自己的 这些字段主要用于npm包页面的展示</span><br><span class="line"><span class="comment">// 我的脚手架叫做 lrxc-cli</span></span><br><span class="line">name</span><br><span class="line">version</span><br><span class="line">description</span><br><span class="line">author</span><br><span class="line">keywords</span><br><span class="line">homepage</span><br><span class="line">repository</span><br><span class="line">bin</span><br></pre></td></tr></table></figure>

<h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5.发布"></a>5.发布</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>在npm官网注册自己的账号</span><br><span class="line"># <span class="number">2.</span>注意</span><br><span class="line">注意第一次发布需要邮箱验证</span><br><span class="line">并且发布时候npm必须是npm源 不能是淘宝的 否则会一直失败</span><br><span class="line">可以使用 nrm 来切换</span><br><span class="line">yarn <span class="built_in">global</span> add nrm </span><br><span class="line">nrm ls</span><br><span class="line">nrm use npm</span><br><span class="line"># <span class="number">3.</span>npm login</span><br><span class="line">输入自己账号密码</span><br><span class="line"># <span class="number">4.</span>npm publish</span><br><span class="line">当没有报错的时候就发布成功了</span><br><span class="line">可以在npm官网搜索到自己的包</span><br><span class="line"># <span class="number">5.</span>npm install xxx -g</span><br><span class="line">xxx create 项目名</span><br><span class="line">这时候你就可以看到自己github的所有仓库啦</span><br><span class="line"># <span class="number">6.</span>这个脚手架是根据 git tag来下载的</span><br><span class="line">所以要对想要clone的 仓库打tag</span><br><span class="line">git tag -a v1<span class="number">.0</span> -m <span class="string">&quot;my version 1.0&quot;</span></span><br><span class="line">此时终端运行 xxx create 项目名</span><br><span class="line">就会跳出一个 <span class="number">1.0</span> 的下一步</span><br><span class="line">按住回车就开始克隆啦</span><br></pre></td></tr></table></figure>

<h2 id="6-使用到的包"><a href="#6-使用到的包" class="headerlink" title="6.使用到的包"></a>6.使用到的包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios:发送ajax请求的</span><br><span class="line"><span class="attr">commander</span>:提供终端命令行支持的包</span><br><span class="line"><span class="attr">consolidate</span>:用于从npm上下载东西统一模板引擎</span><br><span class="line">download-git-repo:下载仓库的</span><br><span class="line"><span class="attr">inquirer</span>:命令行交互工具</span><br><span class="line"><span class="attr">metalsmith</span>:遍历下载文件 是否需要模板渲染</span><br><span class="line"><span class="attr">ncp</span>: 社区</span><br><span class="line"><span class="attr">ora</span>: 命令行loading效果</span><br></pre></td></tr></table></figure>

<blockquote>
具体代码就不说了,从使用的包就可以看出来
就是使用nodejs通过github提供的api获取仓库信息
通过一些包完成命令行交互
然后又通过fs模块读取渲染下载文件
完成的简单实用的脚手架
如果需要定制需求的话
具体的API可以直接看npm包的页面
</blockquote>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>自己搭建一个gitlab</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="自己搭建一个gitlab"><a href="#自己搭建一个gitlab" class="headerlink" title="自己搭建一个gitlab"></a>自己搭建一个gitlab</h1><blockquote>这里主要用到了jenkins docker-compose 和 gitlab提供的docker镜像来搭建的</blockquote>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">brew install jenkins-lts</span><br><span class="line">#</span><br><span class="line">brew services start jenkins-lts</span><br><span class="line">brew services restart jenkins-lts</span><br><span class="line">brew upgrade jenkins-lts</span><br><span class="line">记住自己的密匙</span><br><span class="line">#</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080/</span></span><br></pre></td></tr></table></figure>
<h3 id="服务器安装"><a href="#服务器安装" class="headerlink" title="服务器安装"></a>服务器安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -itd -u root -p <span class="number">8080</span>:<span class="number">8080</span> -v jenkins-data:<span class="regexp">/var/</span>jenkins_home -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock -v <span class="string">&quot;$HOME&quot;</span>:<span class="regexp">/home --name jenkins jenkins/</span>jenkins</span><br><span class="line"><span class="comment">// jenkinsci/blueocean</span></span><br><span class="line">#</span><br><span class="line">docker logs jenkins</span><br><span class="line">记住自己的密匙</span><br><span class="line">#</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//公网地址:8080/</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul>
<li>启动并打开自己本地或者服务器<code>jenkins</code>的网页</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 添加CDN</span><br><span class="line">Manage jenkins =&gt; Manage Plugins =&gt; <span class="function"><span class="params">Advanced</span> =&gt;</span> URL</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json</span></span><br><span class="line"># 需要安装的必备插件</span><br><span class="line">Authorize Project</span><br><span class="line">GitHub Integration</span><br><span class="line">GitLab</span><br><span class="line">Publish Over SSH</span><br><span class="line">SSH Agent</span><br><span class="line">SSH </span><br><span class="line">SSH Pipeline Steps</span><br><span class="line">#</span><br><span class="line">安装docker-compose</span><br><span class="line"># vim docker-compose.yml </span><br><span class="line"><span class="attr">http</span>:<span class="comment">//xxx:8088/</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//公网地址:8088/users/sign_in</span></span><br><span class="line"># <span class="number">1</span></span><br><span class="line"><span class="comment">// 复制 https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml</span></span><br><span class="line"><span class="comment">// 更改以下几行替换成自己的相关信息</span></span><br><span class="line">gitlab</span><br><span class="line">- GITLAB_HOST=公网地址</span><br><span class="line">- GITLAB_ROOT_PASSWORD=管理员密码</span><br><span class="line">- GITLAB_ROOT_EMAIL=管理员邮箱</span><br><span class="line"> <span class="attr">ports</span>: <span class="comment">//映射端口</span></span><br><span class="line">      - <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line"># <span class="number">2.</span></span><br><span class="line"><span class="comment">// 或者直接复制下方</span></span><br><span class="line"><span class="attr">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services</span>:</span><br><span class="line">  web:</span><br><span class="line">    image: <span class="string">&#x27;twang2218/gitlab-ce-zh&#x27;</span></span><br><span class="line">    <span class="attr">restart</span>: always</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;公网地址&#x27;</span></span><br><span class="line">    <span class="attr">environment</span>:</span><br><span class="line">      TZ: <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG</span>: |</span><br><span class="line">        external_url <span class="string">&#x27;http://公网地址&#x27;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="number">2222</span></span><br><span class="line">        unicorn[<span class="string">&#x27;port&#x27;</span>] = <span class="number">8888</span></span><br><span class="line">        nginx[<span class="string">&#x27;listen_port&#x27;</span>] = <span class="number">80</span></span><br><span class="line">    <span class="attr">ports</span>:</span><br><span class="line">      - <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes</span>:</span><br><span class="line">      - ./config:<span class="regexp">/etc/gi</span>tlab</span><br><span class="line">      - ./data:<span class="regexp">/var/</span>opt/gitlab</span><br><span class="line">      - ./logs:<span class="regexp">/var/</span>log/gitlab</span><br></pre></td></tr></table></figure>

<h3 id="开启CICD"><a href="#开启CICD" class="headerlink" title="开启CICD"></a>开启CICD</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建项目</span><br><span class="line">设置</span><br><span class="line">集成</span><br><span class="line"></span><br><span class="line">选择 Campfire push evnets <span class="comment">// 当push时候触发</span></span><br><span class="line">取消ssh verification <span class="comment">// 没有证书</span></span><br></pre></td></tr></table></figure>

<h2 id="使用jekins"><a href="#使用jekins" class="headerlink" title="使用jekins"></a>使用jekins</h2><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">新建任务</span><br><span class="line">jenkins-demo</span><br><span class="line">自由风格</span><br><span class="line">源码管理</span><br><span class="line">构建触发器</span><br><span class="line"><span class="comment">//填写到 gitlab 集成 url</span></span><br><span class="line">build when a change is pushed to gitLab</span><br><span class="line">选中push event</span><br><span class="line">opened merge Request events</span><br><span class="line">approved merge request(ee-only)</span><br><span class="line">comments</span><br><span class="line">comment <span class="keyword">for</span> triggering a build</span><br></pre></td></tr></table></figure>

<h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">      docker &#123;</span><br><span class="line">        image <span class="string">&#x27;node:10&#x27;</span></span><br><span class="line">        args <span class="string">&#x27;-p 20000:8080&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Building..&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;node -v&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;echo &quot;hello&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Test&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Testing..&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Deploy&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Deploying....&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="端口问题"><a href="#端口问题" class="headerlink" title="端口问题"></a>端口问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jenkins 和 gitlab在一个服务器上</span></span><br><span class="line">管理中心</span><br><span class="line">设置</span><br><span class="line">网络</span><br><span class="line">外发请求</span><br><span class="line">选中 allow requests ...</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>React实现虚拟滚动</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>在很早之前我们都是通过滚动距离来进行判断,是否在可视区,进而判断是否渲染,完成虚拟列表</li>
<li>这个过程是有些繁琐的,当滚动回去的时候 还要重新计算逻辑</li>
<li>但是<code>js</code> 的新对象 <code>IntersectionObserver</code> 就完美解决了这个问题</li>
<li>可以通过这个对象的方法进行设计,直接可以根据 <code>entry.isIntersecting</code> 判断是否在可视区</li>
<li><code>true</code> 就是可视区 <code>false</code> 就在屏幕之外</li>
<li>逻辑结构简单明了</li>
<li>通过 <code>react Hooks</code> 进行了封装</li>
<li>用的时候只需要调用下就可以很简单的完成一个虚拟列表了</li>
</ul>
<h2 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; RefObject, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface Args <span class="keyword">extends</span> IntersectionObserverInit &#123;</span><br><span class="line">  freezeOnceVisible?: boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ReactRef&#125;</span> </span>elementRef 传入虚拟列表父盒子的 ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * threshold         阀值 0-1 1表示完全出现在屏幕可视区域才触发</span></span><br><span class="line"><span class="comment"> * root              表示指定根元素 默认为浏览器视口  用于检查目标可见性</span></span><br><span class="line"><span class="comment"> * rootMargin        root的外边距 &#x27;0 0 0 0&#x27;  </span></span><br><span class="line"><span class="comment"> * freezeOnceVisible 是否缓存 再次滑动不重新渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>entry 这个对象具有当前可视区的信息 </span></span><br><span class="line"><span class="comment"> * 例如 entry.isIntersecting 是否在可视区范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useVirtualList</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  elementRef: RefObject&lt;Element&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    threshold = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    root = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootMargin = <span class="string">&#x27;0%&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    freezeOnceVisible = <span class="literal">true</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: Args</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">IntersectionObserverEntry</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [entry, setEntry] = useState&lt;IntersectionObserverEntry&gt;()</span><br><span class="line">  <span class="keyword">const</span> frozen = entry?.isIntersecting &amp;&amp; freezeOnceVisible</span><br><span class="line">  <span class="keyword">const</span> updateEntry = ([entry]: IntersectionObserverEntry[]): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setEntry(entry)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = elementRef?.current</span><br><span class="line">    <span class="keyword">const</span> hasIOSupport = !!<span class="built_in">window</span>.IntersectionObserver</span><br><span class="line">    <span class="keyword">if</span> (!hasIOSupport || frozen || !node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> observerParams = &#123; threshold, root, rootMargin &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(updateEntry, observerParams)</span><br><span class="line">    observer.observe(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> observer.disconnect()</span><br><span class="line">  &#125;, [elementRef, <span class="built_in">JSON</span>.stringify(threshold), root, rootMargin, frozen])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useVirtualList </span><br></pre></td></tr></table></figure>

<h2 id="index-tsx"><a href="#index-tsx" class="headerlink" title="index.tsx"></a>index.tsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useVirtualList <span class="keyword">from</span> <span class="string">&#x27;./useVirtualList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Section = <span class="function">(<span class="params">props: any</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> entry = useVirtualList(ref, &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> isVisible = !!entry?.isIntersecting</span><br><span class="line">  <span class="keyword">var</span> imgUrlArr = [ <span class="comment">// 所有需要加载的图片链接</span></span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Render Section <span class="subst">$&#123;props.title&#125;</span>`</span>, &#123; isVisible &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">minHeight:</span> &#x27;<span class="attr">10vh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">000</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fontSize:</span> &#x27;<span class="attr">2rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        isVisible ? (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &#x27;<span class="attr">auto</span>&#x27;, <span class="attr">textAlign:</span> &#x27;<span class="attr">center</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the &#123;props.title&#125; girl<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgUrlArr[(0</span> | <span class="attr">Math.random</span>() * <span class="attr">7</span>)]&#125; <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ) : &quot;&quot;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">IndexPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        Array.from(&#123; length: 100 &#125;).map((_, index) =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Section</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">1</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        ))</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>通过docker部署项目</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h2><blockquote>具体安装流程可以参考官网,一步一步走没有问题的,这里这是总结下</blockquote>

<ul>
<li><a href="https://docs.docker.com/get-started/">docker安装流程</a></li>
</ul>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="string">sudo</span> <span class="string">yum</span> <span class="string">remove</span> <span class="string">docker</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-client</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-client-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-common</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-latest</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-latest-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-logrotate</span> <span class="string">\</span></span><br><span class="line">                  <span class="string">docker-engine</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">yum</span> <span class="string">remove</span> <span class="string">docker-ce</span> <span class="string">docker-ce-cli</span> <span class="string">containerd.io</span></span><br><span class="line"><span class="string">rm</span> <span class="string">-rf</span> <span class="string">/var/lib/docker</span></span><br><span class="line"><span class="string">rm</span> <span class="string">-rf</span> <span class="string">/var/lib/containerd</span></span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">-y</span> <span class="string">yum-utils</span></span><br><span class="line"><span class="string">yum-config-manager</span> <span class="string">\</span></span><br><span class="line">    <span class="string">--add-repo</span> <span class="string">\</span></span><br><span class="line">    <span class="string">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="string">yum</span> <span class="string">makecache</span> <span class="string">fast</span></span><br><span class="line"><span class="string">yum</span> <span class="string">install</span> <span class="string">docker-ce</span> <span class="string">docker-ce-cli</span> <span class="string">containerd.io</span></span><br></pre></td></tr></table></figure>

<h3 id="启动和检查"><a href="#启动和检查" class="headerlink" title="启动和检查"></a>启动和检查</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">systemctl</span> <span class="string">start</span> <span class="string">docker</span></span><br><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">hello-world</span></span><br><span class="line"><span class="string">docker</span> <span class="string">images</span></span><br></pre></td></tr></table></figure>

<h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/etc/docker</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">tee</span> <span class="string">/etc/docker/daemon.json</span> <span class="string">&lt;&lt;-&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;:</span> [<span class="string">&quot;https://qwm8wimf.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">restart</span> <span class="string">docker</span></span><br></pre></td></tr></table></figure>

<h3 id="docker-配置-vim"><a href="#docker-配置-vim" class="headerlink" title="docker 配置 vim"></a>docker 配置 vim</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">yum install unzip</span><br></pre></td></tr></table></figure>

<h2 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2.基本命令"></a>2.基本命令</h2><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">search</span></span><br><span class="line">            <span class="string">mysql</span> <span class="string">--filter=STARS=3000</span> <span class="comment"># 查找 3000 starts 以上的</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">镜像名[:tag]</span>               <span class="comment"># 下载指定版本</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">images</span></span><br><span class="line">              <span class="string">-a</span> <span class="string">--all</span>      <span class="comment"># 列出所有的镜像</span></span><br><span class="line">              <span class="string">-q</span> <span class="string">--quiet</span>    <span class="comment"># 只显示镜像的 id</span></span><br><span class="line">              <span class="string">-aq</span>           <span class="comment"># 常用</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">docker</span> <span class="string">rmi</span> </span><br><span class="line">            <span class="string">-f</span> <span class="string">imageId1</span> <span class="string">imageId2</span> <span class="string">...</span>   <span class="comment"># 删除</span></span><br><span class="line">            <span class="string">-f</span> <span class="string">$(docker</span> <span class="string">images</span> <span class="string">-aq)</span>    <span class="comment"># 删除所有     </span></span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">docker</span> <span class="string">ps</span>                         <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">          <span class="string">-a</span>                      <span class="comment"># 查看曾经运行的容器</span></span><br><span class="line">          <span class="string">-a</span> <span class="string">-n=?</span>                 <span class="comment"># 指定个数显示</span></span><br><span class="line">          <span class="string">-q</span>                      <span class="comment"># 只显示 imagesId</span></span><br><span class="line"><span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> []  <span class="string">image[:tag]</span> </span><br><span class="line">           <span class="string">-d</span>                     <span class="comment"># 以后台方式运行</span></span><br><span class="line">              <span class="string">-p</span>  <span class="number">8080</span><span class="string">:8080</span> <span class="string">镜像名:tag</span>    </span><br><span class="line">           <span class="string">-it</span>                    <span class="comment"># 使用交互方式运行 前台运行</span></span><br><span class="line">           <span class="string">-p</span>                     <span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">                     <span class="comment"># 第一个端口是本地(公网) 第二个是容器内的</span></span><br><span class="line">               <span class="string">-p</span> <span class="string">ip:主机端口:容器端口</span></span><br><span class="line">               <span class="string">-p</span> <span class="string">主机端口:容器端口</span>  <span class="comment">## 常用</span></span><br><span class="line">               <span class="string">-p</span> <span class="string">容器端口</span></span><br><span class="line">               <span class="string">容器端口</span></span><br><span class="line">           <span class="string">--name</span> <span class="string">xxx</span> </span><br><span class="line">           <span class="string">-v</span> <span class="string">主机目录:容器内目录</span>    </span><br><span class="line">                 <span class="comment">## 匿名挂载 -v 容器内路径 </span></span><br><span class="line">                 <span class="string">docker</span> <span class="string">...</span> <span class="string">-v</span> <span class="string">容器内路径</span> <span class="string">nginx</span></span><br><span class="line">                 <span class="comment">## 具名挂载 映射 自定义名字前不带斜杠</span></span><br><span class="line">                 <span class="string">docker</span> <span class="string">...</span> <span class="string">-v</span> <span class="string">自定义名字:容器内路径</span> <span class="string">nginx</span></span><br><span class="line">                 <span class="comment">### volume</span></span><br><span class="line">                 <span class="string">docker</span> <span class="string">volume</span> <span class="string">ls</span></span><br><span class="line">                              <span class="string">inspect</span> <span class="string">自定义名字</span></span><br><span class="line">                              <span class="comment"># /var/lib/docker/volumns/...</span></span><br><span class="line">                              <span class="string">create</span></span><br><span class="line">                              <span class="string">prune</span></span><br><span class="line">                              <span class="string">rm</span></span><br><span class="line">                 <span class="comment">### -v 自定义名字:容器路径[:ro|:rw]</span></span><br><span class="line">                 <span class="string">指定容器内部</span> <span class="string">读写权限</span> </span><br><span class="line">           <span class="string">-e</span>                     <span class="comment"># 配置环境</span></span><br><span class="line">           <span class="string">-P</span>                     <span class="comment"># 随机指定端口 大写的P</span></span><br><span class="line">           <span class="string">--rm</span>                   <span class="comment"># 用完就删除掉</span></span><br><span class="line">   <span class="comment">## 运行容器 </span></span><br><span class="line">   <span class="string">docker</span> <span class="string">run</span> <span class="string">-it</span> <span class="string">centos</span> <span class="string">/bin/bash</span> </span><br><span class="line">   <span class="comment">## 进入容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">exec</span> <span class="string">-it</span> <span class="string">容器名</span> <span class="string">/bin/bash</span> <span class="comment"># 开启一个新的终端</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">attach</span> <span class="string">容器ID</span>            <span class="comment"># 进入正在运行的命令行 不是新窗口</span></span><br><span class="line">   <span class="comment">## 退出容器</span></span><br><span class="line">   <span class="string">exit</span></span><br><span class="line">   <span class="string">按住</span> <span class="string">ctrl</span> <span class="string">+</span> <span class="string">p</span> <span class="string">+</span> <span class="string">q</span>              <span class="comment"># 退出 但不关闭容器 </span></span><br><span class="line">   <span class="comment">## 删除容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">rm</span> <span class="string">容器ID</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$(docker</span> <span class="string">ps</span> <span class="string">-aq)</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">ps</span> <span class="string">-a</span> <span class="string">-q|xargs</span> <span class="string">docker</span> <span class="string">rm</span> </span><br><span class="line">   <span class="comment">## 启动容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">start</span> <span class="string">容器ID</span></span><br><span class="line">   <span class="comment">## 重启容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">restart</span> <span class="string">容器ID</span></span><br><span class="line">   <span class="comment">## 停止容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">stop</span> <span class="string">容器ID</span>  </span><br><span class="line">   <span class="comment">## 强制停止容器</span></span><br><span class="line">   <span class="string">docker</span> <span class="string">kill</span> <span class="string">容器ID</span></span><br></pre></td></tr></table></figure>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包 Dockerfile 文件  </span></span><br><span class="line"> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">dockerfile1</span> <span class="string">-t</span> <span class="string">mydocker</span> <span class="string">.</span></span><br><span class="line">              <span class="string">-f</span> <span class="string">dockerfile文件名/文件路径</span></span><br><span class="line">              <span class="string">-t</span> <span class="string">.</span> <span class="string">生成文件路径</span> <span class="string">.代表当前路径</span></span><br></pre></td></tr></table></figure>



<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">version</span></span><br><span class="line"><span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="string">docker</span> <span class="string">--help</span></span><br><span class="line"><span class="string">docker</span> <span class="string">stats</span>                                  <span class="comment"># 查看cpu</span></span><br><span class="line"><span class="string">https://docs.docker.com/reference/</span></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="string">docker</span> <span class="string">logs</span></span><br><span class="line">       <span class="string">docker</span> <span class="string">logs</span> <span class="string">-tf</span> <span class="string">容器ID</span></span><br><span class="line">       <span class="string">docker</span> <span class="string">logs</span> <span class="string">-tf</span> <span class="string">--tail</span> [<span class="string">number</span>] <span class="string">容器ID</span></span><br><span class="line">     <span class="comment"># docker run -d centos /bin/sh -c &quot;while true;do echo   &#x27;eternallycyf&#x27;;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment"># 查看 容器的进程信息 端口等等</span></span><br><span class="line"><span class="string">docker</span> <span class="string">top</span> <span class="string">容器ID</span>             </span><br><span class="line"><span class="comment"># 查看容器元信息</span></span><br><span class="line"><span class="string">docker</span> <span class="string">inspect</span> <span class="string">容器ID</span>         </span><br><span class="line"><span class="comment"># 将容器内的文件 复制出来</span></span><br><span class="line"><span class="string">docker</span> <span class="string">cp</span> <span class="string">容器ID:容器内路径</span> <span class="string">目的地主机路径</span></span><br><span class="line"><span class="string">docker</span> <span class="string">cp</span> <span class="string">容器ID:/home/eternall.md</span> <span class="string">/home</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">history</span> <span class="string">imageID</span> <span class="string">--no-trunc</span></span><br></pre></td></tr></table></figure>

<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><h4 id="dockerhub"><a href="#dockerhub" class="headerlink" title="dockerhub"></a>dockerhub</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">用户名</span> <span class="string">-p</span> <span class="string">密码</span></span><br><span class="line"><span class="string">docker</span> <span class="string">logout</span></span><br></pre></td></tr></table></figure>

<h4 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login</span></span><br><span class="line"><span class="string">docker</span> <span class="string">login</span> <span class="string">--username=用户名</span> <span class="string">registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">镜像名:tag</span></span><br><span class="line"><span class="comment"># push</span></span><br><span class="line"><span class="string">docker</span> <span class="string">push</span> <span class="string">eternallycyf/镜像名[:tag]</span></span><br></pre></td></tr></table></figure>

<h3 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">tag</span> <span class="string">centos</span> <span class="string">eternallycyf/myCentos:1.0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">  <span class="string">docker</span> <span class="string">commit</span> <span class="string">-m=&#x27;&#x27;</span> <span class="string">-a=&#x27;作者&#x27;</span> <span class="string">容器ID</span> <span class="string">目标镜像名:[tag]</span></span><br><span class="line"><span class="comment"># push </span></span><br><span class="line">  <span class="string">docker</span> <span class="string">push</span> <span class="string">eternallycyf/镜像名:tag</span></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line">  <span class="string">docker</span> <span class="string">pull</span> <span class="string">镜像名:tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将docker镜像压缩</span></span><br><span class="line">  <span class="string">docker</span> <span class="string">save</span> <span class="string">-o</span> <span class="string">压缩包名.zip</span> <span class="string">镜像名:tag</span> </span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="string">docker</span> <span class="string">load</span> <span class="string">-i</span> <span class="string">/usr/tmp/压缩包名.zip</span></span><br><span class="line"><span class="comment"># 上传到服务器</span></span><br><span class="line"><span class="string">scp</span> <span class="string">压缩包名.zip</span> <span class="string">root@公网地址:/user/tmp</span></span><br></pre></td></tr></table></figure>

<h3 id="容器互联-evth-pair"><a href="#容器互联-evth-pair" class="headerlink" title="容器互联 evth-pair"></a>容器互联 evth-pair</h3><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 桥接 container host none</span></span><br><span class="line"><span class="string">ip</span> <span class="string">addr</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">ls</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">rm</span> <span class="string">xxx</span></span><br><span class="line"><span class="comment"># docker0 默认 域名不能访问 --link 可以打通连接</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">-p</span> <span class="string">--net</span> <span class="string">bridge</span> <span class="string">tomcat</span></span><br><span class="line"><span class="comment"># 自定义网络</span></span><br><span class="line"><span class="comment"># driver 默认 subnet 子网 geteway 网关</span></span><br><span class="line"><span class="string">docker</span> <span class="string">network</span> <span class="string">create</span> <span class="string">--driver</span> <span class="string">bridge</span> <span class="string">--subnet</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span> <span class="bullet">-</span> <span class="string">geteway</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> <span class="string">mynet</span></span><br><span class="line"><span class="string">docker</span> <span class="string">xxx</span> <span class="string">--net</span> <span class="string">mynet</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure>

<h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在hosts 配置里链接了 </span></span><br><span class="line">--link 容器名 </span><br></pre></td></tr></table></figure>



<h2 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3. Dockerfile"></a>3. Dockerfile</h2><ul>
<li>命名为 Dockerfile 就会自动找他 </li>
</ul>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment"># maintainer 维护者信息 姓名+邮箱</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> eternallycyf&lt;xxx@qq.com&gt;</span><br><span class="line"><span class="comment"># run 构建时候需要运行的命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="comment"># add 集成别的东西 会自动解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> 文件名 解压后的镜像内地址</span></span><br><span class="line"><span class="comment"># workdir 设置当前工作目录 / /bin/bash</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment"># valume 设置容器卷</span></span><br><span class="line">VALUME </span><br><span class="line"><span class="comment"># expose 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="keyword">RUN</span></span><br></pre></td></tr></table></figure>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本命令  只有最后一个会生效 可被替代 (覆盖) docker run xxx -l 就会替换掉 编写的 CMD [&quot;ls&quot;,&quot;-a&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span> </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;----end---&#x27;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br><span class="line"><span class="comment"># entrypoint 脚本命令  可以追加命令 不</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># onbuild 当构建一个dockerfile 文件时 就触发这个指令</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span></span><br><span class="line"><span class="comment"># copy 文件拷贝到镜像中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /user/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"><span class="comment"># env 环境变量 ENV </span></span><br><span class="line">  <span class="comment"># 例如 MYPATH user/local</span></span><br><span class="line">  <span class="comment"># 使用时候需要 $MYPATH</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /<span class="keyword">user</span>/local</span><br></pre></td></tr></table></figure>

<h3 id="数据卷共享"><a href="#数据卷共享" class="headerlink" title="数据卷共享"></a>数据卷共享</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -t --name docker01 容器ID </span><br><span class="line">docker run -it --name docker02 --volumes-<span class="keyword">from</span> docker01 容器ID</span><br><span class="line">这时这两个容器都是相互同步的 即使删除了 还在</span><br></pre></td></tr></table></figure>

<h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根目录创建 Dockerfile  </span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">1</span>-alpine AS installer</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm i tyarn -g</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tyarn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">1</span>-alpine AS builder</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=installer /node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>  vixlet/nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /dist /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  <span class="number">127.0</span>.<span class="number">0.1</span>;</span><br><span class="line">    access_log off;</span><br><span class="line">    add_header X-Frame-Options sameorigin always;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /app;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-docker-compose"><a href="#4-docker-compose" class="headerlink" title="4. docker compose"></a>4. docker compose</h2><h3 id="基础步骤"><a href="#基础步骤" class="headerlink" title="基础步骤"></a>基础步骤</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">dockerfile</span></span><br><span class="line"><span class="string">docker-compose.yml</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">up</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">down</span> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">可以使用</span> <span class="string">Dockerfile</span> <span class="string">生成镜像</span></span><br><span class="line"><span class="string">或者</span> <span class="string">docker-compose.yml</span> <span class="string">image</span></span><br></pre></td></tr></table></figure>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"># 重新构建</span><br><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>

<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="comment"># 服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="comment">## build 生成的 指定dockerfile</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="comment">## 镜像</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine</span></span><br><span class="line"><span class="string">    network:  </span></span><br><span class="line"><span class="string">    ## 部署</span></span><br><span class="line"><span class="string">    deploy:</span></span><br><span class="line"><span class="string">      ### 副本</span></span><br><span class="line"><span class="string">      replicas: 6</span></span><br><span class="line"><span class="string"># 其他配置</span></span><br><span class="line"><span class="string">volumns: </span></span><br><span class="line"><span class="string">network:</span></span><br><span class="line"><span class="string">configs:</span></span><br></pre></td></tr></table></figure>

<h2 id="5-doker-swarm"><a href="#5-doker-swarm" class="headerlink" title="5. doker swarm"></a>5. doker swarm</h2><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br><span class="line">docker service update</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">双主双从:</span> <span class="string">假设一个节点挂了</span> <span class="string">其他节点是否可用</span></span><br><span class="line"><span class="string">Raft</span> <span class="string">协议:</span> <span class="string">保证大多数节点存活才可以用</span> <span class="string">只要&gt;1</span> <span class="string">集群至少大于3台</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">init</span> <span class="string">--advertise-addr</span> <span class="string">IP地址</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">docker</span> <span class="string">node</span> <span class="string">ls</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">join-token</span> <span class="string">manager</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">join-token</span> <span class="string">worker</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">swarm</span> <span class="string">leave</span></span><br><span class="line"><span class="string">update</span></span><br></pre></td></tr></table></figure>


<h3 id="6-docker-stack"><a href="#6-docker-stack" class="headerlink" title="6. docker stack"></a>6. docker stack</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 单机</span><br><span class="line">docker-compose up -d workpress.yaml</span><br><span class="line"># 集群</span><br><span class="line">docker stack deploy worldpress.yaml</span><br></pre></td></tr></table></figure>

<h3 id="7-docker-secret"><a href="#7-docker-secret" class="headerlink" title="7. docker secret"></a>7. docker secret</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 配置密码 证书</span><br><span class="line">docker secrets</span><br><span class="line">   create</span><br><span class="line">   inspect</span><br><span class="line">   ls</span><br><span class="line">   rm</span><br></pre></td></tr></table></figure>

<h3 id="8-工具"><a href="#8-工具" class="headerlink" title="8. 工具"></a>8. 工具</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">pull</span> <span class="string">mysql:5.7</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">-p</span> <span class="number">3310</span><span class="string">:3306</span> <span class="string">-v</span> <span class="string">/home/mysql/conf:/etc/mysql/conf.d</span> <span class="string">-v</span> <span class="string">/home/mysql/data:/var/lib/mysql</span> <span class="string">-e</span> <span class="string">MYSQL_ROOT_PASSWORD=666222</span> <span class="string">--name</span> <span class="string">mysql01</span> <span class="string">mysql:5.7</span></span><br><span class="line"><span class="comment"># navicat 3310 端口</span></span><br><span class="line"><span class="string">公网地址:3310</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="number">666222</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">此时在</span> <span class="string">服务器的</span>  <span class="string">/home/mysql/conf</span> <span class="string">data</span> <span class="string">目录就映射成功了</span></span><br></pre></td></tr></table></figure>


<h4 id="mysql-多个共享"><a href="#mysql-多个共享" class="headerlink" title="mysql 多个共享"></a>mysql 多个共享</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">3310</span>:<span class="number">3306</span> -v /etc/mysql/conf.d -v /<span class="keyword">var</span>/lib/mysql -e MYSQL_ROOT_PASSWORD=<span class="number">666222</span> --name mysql01 mysql:<span class="number">5.7</span></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">3310</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">666222</span> --name mysql02 --volumes-<span class="keyword">from</span> mysql01 mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<h4 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">8000</span>:<span class="number">8000</span> -p <span class="number">9443</span>:<span class="number">9443</span> --name portainer --restart=always -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock -v portainer_data:<span class="regexp">/data portainer/</span>portainer-ee:latest</span><br><span class="line"></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//公网地址:9443/</span></span><br></pre></td></tr></table></figure>


<h3 id="9-bug"><a href="#9-bug" class="headerlink" title="9. bug"></a>9. bug</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">如果没有前台进程 </span><br><span class="line">docker就会自动停止</span><br><span class="line">例如 nginx 启动后如果没有被用 就会立即停止</span><br><span class="line"># tomcat</span><br><span class="line">阿里云下载的镜像 默认是阉割版的</span><br><span class="line">cp webapps.dist<span class="comment">/* webapps</span></span><br><span class="line"><span class="comment"># elasticsearch 太占内存</span></span><br><span class="line"><span class="comment">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&#x27;-Xms64m -Xmx512m&#x27; elasticsearch:7.6.2</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的基本命令</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><ul>
<li>服务器启动</li>
<li><code>make</code></li>
<li><code>make install</code> <h3 id="开机关机"><a href="#开机关机" class="headerlink" title="开机关机"></a>开机关机</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步数据到硬盘</span></span><br><span class="line">sync </span><br><span class="line"><span class="comment">// 关机 </span></span><br><span class="line">shutdown</span><br><span class="line"><span class="comment">// 重启</span></span><br><span class="line">reboot  | shutdown -r now </span><br><span class="line"><span class="comment">// 10分钟后 重启 </span></span><br><span class="line">shutdown -r +<span class="number">10</span></span><br><span class="line"><span class="comment">// 关闭系统</span></span><br><span class="line">halt</span><br><span class="line">ifconfig en0  <span class="comment">// ipconfig/all     ip addr</span></span><br><span class="line">curl localhost:<span class="number">3344</span></span><br></pre></td></tr></table></figure>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">bin  存放使用的命令</span><br><span class="line">boot linux核心文件</span><br><span class="line">dev  存放外部设备</span><br><span class="line">mnt  临时挂载文件系统 光驱</span><br><span class="line">media  u盘 光驱</span><br><span class="line">lib  动态链接共享库</span><br><span class="line">lost+fount 系统非法关机前没保存的文件</span><br><span class="line">proc 系统内存映射 系统信息</span><br><span class="line">sbin 系统管理员的系统管理程序</span><br><span class="line">srv  服务启动后需要提取的数据</span><br><span class="line">sys  存放文件系统</span><br><span class="line">run  临时文件系统</span><br><span class="line"></span><br><span class="line">etc  系统管理配置文件</span><br><span class="line">home 用户文件夹</span><br><span class="line">root 管理员文件夹</span><br><span class="line">opt  放数据库等守护进程</span><br><span class="line">user 用户的程序放在这里 qq 微信</span><br><span class="line">     user/bin  系统用户 </span><br><span class="line">     user/sbin 超级用户</span><br><span class="line">     user/src  内核源代码</span><br><span class="line"><span class="keyword">var</span>  日志</span><br><span class="line">tmp  临时文件</span><br><span class="line">www  存放网站</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文件名字含义"><a href="#文件名字含义" class="headerlink" title="文件名字含义"></a>文件名字含义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">drwx-wx-wx-x@ root root</span><br><span class="line"># 第一个字符 </span><br><span class="line">d 表示目录</span><br><span class="line">r 便是可以打开的文件</span><br><span class="line">- 文件</span><br><span class="line">l 链接文档</span><br><span class="line"># 三组</span><br><span class="line">r可读 w可写 x可执行 -没权限</span><br><span class="line">主权限 组权限 其他用户权限</span><br><span class="line"># 属组 属主</span><br><span class="line"># 文件大小 时间</span><br></pre></td></tr></table></figure>

<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">useradd - 选项 用户名</span><br><span class="line">        -m 用户名 自动创建这个用户的主目录</span><br><span class="line">  /etc/passwd</span><br><span class="line"># 删除用户</span><br><span class="line">userdel -r 用户名</span><br><span class="line"># 切换用户</span><br><span class="line">su 用户名</span><br><span class="line">sudo su</span><br><span class="line"># hostname 主机名</span><br><span class="line">hostname 修改主机名</span><br><span class="line"># 设置密码</span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ls -a           <span class="comment">// 所有的文件</span></span><br><span class="line">   -l           <span class="comment">// 包含文件的属性和权限 没有隐藏文件</span></span><br><span class="line">   -al</span><br><span class="line">pwd             <span class="comment">// 显示当前目录</span></span><br></pre></td></tr></table></figure>

<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mkdir -p 路径     <span class="comment">// 递归创建 不加就只能在文件存在的基础上创建</span></span><br><span class="line"></span><br><span class="line">rm 文件名             <span class="comment">// 删除文件</span></span><br><span class="line">rmdir 文件夹名字       <span class="comment">// 删除文件夹</span></span><br><span class="line">rm -rf 文件或文件夹名字 <span class="comment">// 删除所有  /*</span></span><br><span class="line"></span><br><span class="line">cp 原路径 新路径      <span class="comment">// 复制文件</span></span><br><span class="line">cp -a 原路径 新路径   <span class="comment">// 复制文件夹</span></span><br><span class="line"></span><br><span class="line">mv 原路径 新路径     <span class="comment">// 移动文件或文件夹 重命名文件</span></span><br><span class="line">mv -f 原路径 新路径  <span class="comment">// 强制</span></span><br></pre></td></tr></table></figure>

<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 更改属组</span><br><span class="line">chgrp [-R] 属性名 文件名  <span class="comment">// -R 递归</span></span><br><span class="line"># 更改属主</span><br><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">           属主名: 属组名 文件名</span><br><span class="line">           </span><br><span class="line"># 更改文件<span class="number">9</span>个属性</span><br><span class="line">chmod [-R] <span class="number">777</span> 文件名/文件名</span><br><span class="line"><span class="attr">r</span>:<span class="number">4</span> w:<span class="number">2</span> x:<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat  文件名   <span class="comment">// 显示文件内容</span></span><br><span class="line">nl   文件名   <span class="comment">// 显示行号</span></span><br><span class="line">less 文件名   <span class="comment">// 和more一样 但可以翻页 空格下一页 b 上一页</span></span><br><span class="line">:q 退出</span><br><span class="line">/搜索文本    <span class="comment">// 向下搜索</span></span><br><span class="line">?搜索文本    <span class="comment">// 向上搜索</span></span><br><span class="line">n           <span class="comment">// 自动跳转下一个</span></span><br><span class="line">N           <span class="comment">// 自动跳转上一个</span></span><br><span class="line"></span><br><span class="line">more 文件名   <span class="comment">// 一页一页的显示 </span></span><br><span class="line">head -n <span class="number">20</span> 文件名   <span class="comment">// 只看头几行</span></span><br><span class="line">tail 文件名   <span class="comment">// 只看结尾几行</span></span><br><span class="line">man ap 帮助命令</span><br></pre></td></tr></table></figure>

<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">touch</span><br><span class="line">echo xxx &gt;&gt; 文件名</span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 硬链接 </span><br><span class="line">允许一个文件有多个路径 防止误删</span><br><span class="line">A--B 就算A删除了 B还能访问</span><br><span class="line">ln A B</span><br><span class="line"># 软连接 </span><br><span class="line">快捷方式</span><br><span class="line">ln -s A B</span><br></pre></td></tr></table></figure>
<h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">esc :wq 退出</span><br><span class="line">i 输入</span><br><span class="line">x 删除</span><br><span class="line">:%d 选择所有的删除</span><br><span class="line">:%y 粘贴</span><br><span class="line">P 粘贴</span><br><span class="line"></span><br><span class="line">u 撤销</span><br><span class="line">ctrl+ r 取消撤销</span><br></pre></td></tr></table></figure>

<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## 压缩</span><br><span class="line">tar cvf 压缩后名字.tar 路径 </span><br><span class="line">zip 压缩后名字.zip 原名</span><br><span class="line">## 解压</span><br><span class="line">tar xvf 名字.tar</span><br><span class="line">unzip 名字.zip</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><ul>
<li>主要目的是让请求者和响应者解耦，并集中管理</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">interface</span> Command &#123;</span><br><span class="line">    execute() : <span class="built_in">void</span>;</span><br><span class="line">    undo() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommandOn</span> <span class="title">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> receiver : Receiver;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">receiver : Receiver</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 执行命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> execute() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOn();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 撤销命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> undo() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 关闭命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommandOff</span> <span class="title">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> receiver : Receiver;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">receiver : Receiver</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 执行命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> execute() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOff();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 撤销命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> undo() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver.actionOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 空命令（省去判空操作）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="title">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> execute() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> undo() : <span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> actionOn() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是命令接收者，开启了某动作&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> actionOff() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是命令接收者，关闭了某动作&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> onCommands : <span class="built_in">Array</span>&lt;Command&gt;;</span><br><span class="line">    <span class="keyword">private</span> offCommands : <span class="built_in">Array</span>&lt;Command&gt;;</span><br><span class="line">    <span class="keyword">private</span> undoCommand : Command;</span><br><span class="line">    <span class="keyword">private</span> slotNum : <span class="built_in">number</span> = <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.undoCommand = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        <span class="built_in">this</span>.onCommands = [];</span><br><span class="line">        <span class="built_in">this</span>.offCommands = [];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.slotNum; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            <span class="built_in">this</span>.offCommands[i] =  <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> setCommand(index : <span class="built_in">number</span>, <span class="attr">onCommand</span> : Command, <span class="attr">offCommand</span> : Command) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onCommands[index] = onCommand;</span><br><span class="line">        <span class="built_in">this</span>.offCommands[index] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 开启</span></span><br><span class="line">    <span class="keyword">public</span> on (index : <span class="built_in">number</span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.onCommands[index].execute();<span class="comment">// 调用相应方法</span></span><br><span class="line">        <span class="comment">//记录这次操作，用于撤销</span></span><br><span class="line">        <span class="built_in">this</span>.undoCommand = <span class="built_in">this</span>.onCommands[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 关闭</span></span><br><span class="line">    <span class="keyword">public</span> off (index : <span class="built_in">number</span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.offCommands[index].execute();</span><br><span class="line">        <span class="built_in">this</span>.undoCommand = <span class="built_in">this</span>.offCommands[index];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 撤销</span></span><br><span class="line">    <span class="keyword">public</span> undo () : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建接收者</span></span><br><span class="line">    <span class="keyword">const</span> receiver : Receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建命令</span></span><br><span class="line">    <span class="keyword">const</span> commandOn : Command = <span class="keyword">new</span> ConcreteCommandOn(receiver);</span><br><span class="line">    <span class="keyword">const</span> commandOff : Command = <span class="keyword">new</span> ConcreteCommandOff(receiver);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建调用者</span></span><br><span class="line">    <span class="keyword">const</span> invoker : Invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">    invoker.setCommand(<span class="number">0</span>, commandOn, commandOff);</span><br><span class="line"></span><br><span class="line">    invoker.on(<span class="number">0</span>);</span><br><span class="line">    invoker.off(<span class="number">0</span>);</span><br><span class="line">    invoker.undo();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">main();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/command-pattern.html">https://www.runoob.com/design-pattern/command-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-command">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-command</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/command.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ul>
<li>定义一组算法、将每个算法都封装，并且使它们之间可以互换</li>
<li>用于替换 多个<code>ifelse</code> 或 <code>switch</code></li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">position: <span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.position = position</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stratege</span> </span>&#123;</span><br><span class="line">    <span class="attr">locations</span>: Location [] = []</span><br><span class="line">   <span class="function"><span class="title">constructor</span>(<span class="params">...locations</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.locations = locations</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;路线经过了&#x27;</span>)</span><br><span class="line">       <span class="built_in">this</span>.location.forEach(<span class="function"><span class="params">el</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(el.position+ <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Move</span> </span>&#123;</span><br><span class="line">    <span class="attr">start</span>: Location</span><br><span class="line">    <span class="attr">end</span>: Location</span><br><span class="line">    <span class="attr">stratege</span>: Stratege</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.start = <span class="keyword">new</span> Location(<span class="string">&#x27;1 1&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.end = <span class="keyword">new</span> Location(<span class="string">&#x27;0 0&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> sea = <span class="keyword">new</span> Location(<span class="string">&#x27;1 0&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> land = <span class="keyword">new</span> Location(<span class="string">&#x27;1 0&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.stratege = <span class="keyword">new</span> Stratege(<span class="built_in">this</span>.start, sea, <span class="built_in">this</span>.end)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/w3cnote/state-vs-strategy.html">https://www.runoob.com/w3cnote/state-vs-strategy.html</a></li>
<li><a href="https://www.runoob.com/design-pattern/strategy-pattern.html">https://www.runoob.com/design-pattern/strategy-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/strategy.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>模板方法模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ul>
<li>定义一个操作中的算法框架，将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="keyword">public</span> template() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.operation1();</span><br><span class="line">        <span class="built_in">this</span>.hookMethod() &amp;&amp; <span class="built_in">this</span>.operation2();</span><br><span class="line">        <span class="built_in">this</span>.operation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本方法</span></span><br><span class="line">    <span class="keyword">protected</span> operation1() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;使用了方法operation1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> operation2() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;使用了方法operation2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> operation3() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;使用了方法operation3&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 钩子方法</span></span><br><span class="line">    <span class="keyword">protected</span> hookMethod() : <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> operation2() :<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;对该方法operation2进行了修改再使用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> operation3() :<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;对该方法operation3进行了修改再使用&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 覆盖钩子方法</span></span><br><span class="line">    <span class="keyword">protected</span> hookMethod() : <span class="built_in">boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> class1 : AbstractClass = <span class="keyword">new</span> ConcreteClassA();</span><br><span class="line">    <span class="keyword">const</span> class2 : AbstractClass = <span class="keyword">new</span> ConcreteClassB();</span><br><span class="line"></span><br><span class="line">    class1.template();</span><br><span class="line">    class2.template();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903615476269064">https://juejin.im/post/6844903615476269064</a></li>
<li><a href="https://www.runoob.com/design-pattern/template-pattern.html">https://www.runoob.com/design-pattern/template-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-template-method">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-template-method</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><ul>
<li>避免重新创建对象，其实只要有缓存对象的意思，并且共用一个对象实例，就是享元模式</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  name!: <span class="built_in">string</span></span><br><span class="line">  color!: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">changeColor</span>(<span class="params">color: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">changeName</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> car: Car</span><br><span class="line">  <span class="keyword">static</span> getCar(): Car &#123;</span><br><span class="line">    <span class="keyword">if</span> (CarFactory.car === <span class="literal">null</span>) &#123;</span><br><span class="line">      CarFactory.car = <span class="keyword">new</span> Car()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CarFactory.car</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">CarFactory.getCar().changeColor(<span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html">https://www.runoob.com/design-pattern/flyweight-pattern.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-flyweight">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-flyweight</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/flyweight.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/flyweight.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul>
<li>将对象组合成树形结构以表示“部分-整体”的层次结构。组合使得用户对单个对象和组合对象的使用具有一致性。</li>
<li>常见场景: 文件目录</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>组合对象和叶子对象并不是父子关系，而是组合关系</li>
<li>实现时，我们会将组合对象类 <code>Composite</code> 或者叶子对象类 <code>Leaf</code> 继承于同一个抽象类 <code>Component</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;组合对象的实现&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;叶子对象的实现&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBase</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  nodes: TreeBase[] = [];</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">n: TreeBase</span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">n: TreeBase</span>)</span> &#123;&#125;</span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeComposite</span> <span class="keyword">extends</span> <span class="title">TreeBase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">n: TreeBase</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes.push(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">n: TreeBase</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes.splice(<span class="built_in">this</span>.nodes.findIndex(<span class="function">(<span class="params">e</span>) =&gt;</span> e.name === n.name), <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, I am a composite node`</span>);</span><br><span class="line">    <span class="built_in">this</span>.nodes.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      e.show();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">TreeBase</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>, I am a leaf`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="keyword">new</span> TreeComposite(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> node1 = <span class="keyword">new</span> TreeComposite(<span class="string">&#x27;node1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> leaf1 = <span class="keyword">new</span> Leaf(<span class="string">&#x27;leaf1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> leaf2 = <span class="keyword">new</span> Leaf(<span class="string">&#x27;leaf2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> leaf3 = <span class="keyword">new</span> Leaf(<span class="string">&#x27;leaf3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">root.add(node1);</span><br><span class="line">root.add(leaf3);</span><br><span class="line">node1.add(leaf1);</span><br><span class="line">node1.add(leaf2);</span><br><span class="line">root.show();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * root, I am a composite node</span></span><br><span class="line"><span class="comment"> * tree.component.ts:51 node1, I am a composite node</span></span><br><span class="line"><span class="comment"> * tree.component.ts:64 leaf1, I am a leaf</span></span><br><span class="line"><span class="comment"> * tree.component.ts:64 leaf2, I am a leaf</span></span><br><span class="line"><span class="comment"> * tree.component.ts:64 leaf3, I am a leaf</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.jianshu.com/p/a6e236040505">https://www.jianshu.com/p/a6e236040505</a></li>
<li><a href="https://segmentfault.com/a/1190000019773556">https://segmentfault.com/a/1190000019773556</a></li>
<li><a href="https://github.com/tcorral/Design-Patterns-in-Javascript">https://github.com/tcorral/Design-Patterns-in-Javascript</a></li>
<li><a href="https://www.runoob.com/design-pattern/composite-pattern.html">https://www.runoob.com/design-pattern/composite-pattern.html</a></li>
<li><a href="https://www.cnblogs.com/TomXu/archive/2012/04/12/2435530.html">https://www.cnblogs.com/TomXu/archive/2012/04/12/2435530.html</a></li>
<li><a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-composite">https://github.com/sohamkamani/javascript-design-patterns-for-humans#-composite</a></li>
<li><a href="https://xhui.top/2018/12/20/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-8-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">https://xhui.top/2018/12/20/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-8-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ul>
<li>桥接模式也叫桥梁模式，将实现与抽象放在两个不同的层次中，使得两者可以独立地变化。(最主要的将实现和抽象两个层次划分开来)</li>
<li>常见场景：JDBC驱动程序、银行转账系统（转账分类和转账用户类型）、消息管理（消息类型、消息分类）</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现接口角色</span></span><br><span class="line"><span class="keyword">interface</span> Implementor &#123;</span><br><span class="line">    doSomething() : <span class="built_in">void</span>;</span><br><span class="line">    doAnything() : <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementor1</span> <span class="title">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> doSomething() : <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> doAnything() : <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementor2</span> <span class="title">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> doSomething() : <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> doAnything() : <span class="built_in">void</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> imp : Implementor;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">imp : Implementor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imp = imp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自身的行为和属性</span></span><br><span class="line">    <span class="keyword">public</span> request() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imp.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 具体抽象化角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">imp : Implementor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(imp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> request() : <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 自己写一些处理业务</span></span><br><span class="line">        <span class="built_in">super</span>.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 定义一个实现化角色</span></span><br><span class="line"><span class="keyword">const</span> imp : Implementor = <span class="keyword">new</span> ConcreteImplementor1();</span><br><span class="line"><span class="comment">// 定义一个抽象化角色</span></span><br><span class="line"><span class="keyword">const</span> abs : Abstraction = <span class="keyword">new</span> RefinedAbstraction(imp);</span><br><span class="line"><span class="comment">// 执行上下文</span></span><br><span class="line">abs.request();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000012547750">https://segmentfault.com/a/1190000012547750</a></li>
<li><a href="https://www.runoob.com/design-pattern/bridge-pattern.html">https://www.runoob.com/design-pattern/bridge-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/bridge.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/bridge.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>代理模式是为一个对象提供一个代用品，或占位符，以便控制对它的访问。</li>
<li>对接口进行一定程度的隐藏，用于封装复杂类</li>
<li>缓存代理比较常见。如果传递进来的参数跟以前一致，则可以直接返回前面存储的运算结果。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">2</span></span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">number</span> = <span class="number">3</span></span><br><span class="line">    <span class="attr">d</span>: <span class="built_in">number</span> =<span class="number">4</span></span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;this is test&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarProxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> car: Car</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.car === <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.car = <span class="keyword">new</span> Car</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="built_in">this</span>.car.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.car.test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903555036364814">https://juejin.im/post/6844903555036364814</a></li>
<li><a href="https://www.runoob.com/design-pattern/proxy-pattern.html">https://www.runoob.com/design-pattern/proxy-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/singleton.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><ul>
<li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节</li>
<li>使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Family</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> main():<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> father = <span class="keyword">new</span> Father()</span><br><span class="line">    <span class="keyword">const</span> child = <span class="keyword">new</span> Father()</span><br><span class="line">    father.work();</span><br><span class="line">    child.study()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">study</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000014132789">https://segmentfault.com/a/1190000014132789</a></li>
<li><a href="https://www.runoob.com/design-pattern/facade-pattern.html">https://www.runoob.com/design-pattern/facade-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/facade.html">https://design-patterns.readthedocs.io/zh_CN/latest/structural_patterns/facade.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul>
<li>单例模式就是保证一个类仅有一个实例，并提供一个访问它的全局访问点（静态方法）。</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 构造器私有化，外部不能new</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 2. 本类内部创建对象实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> instance : Singleton1 = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="comment">// 3. 提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getInstance() : Singleton1 &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式（线程不安全）"><a href="#懒汉式（线程不安全）" class="headerlink" title="懒汉式（线程不安全）"></a>懒汉式（线程不安全）</h3><ul>
<li><code>js</code>是基于单线程运行代码，所以不存在线程不安全问题，推荐该种方法。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> instance: Singleton2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getInstance() : Singleton2 &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.instance === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.csdn.net/qq_34106891/article/details/105654640?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_34106891/article/details/105654640?spm=1001.2014.3001.5502</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul>
<li>原型模式<code>Prototype</code> <code>Pattern</code>用原型实例指向创建对象的类，使用于创建新的对象的类的共享原型的属性与方法</li>
<li>简言之就是通过克隆来创建一个一模一样的对象。</li>
<li>应用场景<ul>
<li>创建成本比较大的场景</li>
<li>需要动态的获取当前的对象运行时状态的场景</li>
</ul>
</li>
</ul>
<h2 id="js实现"><a href="#js实现" class="headerlink" title="js实现"></a>js实现</h2><ul>
<li>对于<code>ES5</code>，提供<code>Object.create()</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<code>__proto__</code></li>
<li>对于<code>ES6</code>，提供<code>Object.setPrototypeOf()</code>方法设置一个指定的对象的原型(即,内部<code>[[Prototype]]</code>属性)到另一个对象或 <code>null</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lili&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.birthYear = <span class="number">2015</span>;</span><br><span class="line">    <span class="built_in">this</span>.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.presentYear = <span class="number">2018</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.getDiscription = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`狗狗叫<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,性别<span class="subst">$&#123;<span class="built_in">this</span>.sex&#125;</span>,<span class="subst">$&#123;<span class="built_in">this</span>.presentYear&#125;</span>年<span class="subst">$&#123;<span class="built_in">this</span>.presentYear - <span class="built_in">this</span>.birthYear&#125;</span>岁了`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="built_in">console</span>.log(dog.getDiscription());<span class="comment">// 狗狗叫lili,性别男,2018年3岁了</span></span><br><span class="line">dog.presentYear = <span class="number">2020</span>;<span class="comment">// 修改了当前年份</span></span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="built_in">Object</span>.create(dog);<span class="comment">// 通过ES5语法进行创建</span></span><br><span class="line"><span class="comment">//const dog1 = &#123;&#125;</span></span><br><span class="line"><span class="comment">//Object.setPrototypeOf(dog1, dog);//通过ES6语法进行创建</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.getDiscription());<span class="comment">// 狗狗叫lili,性别男,2020年5岁了</span></span><br></pre></td></tr></table></figure>

<h2 id="ts实现"><a href="#ts实现" class="headerlink" title="ts实现"></a>ts实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Prototype &#123;</span><br><span class="line">    clone():Prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> birthYear: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">public</span> sex: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> presentYear: <span class="built_in">number</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;lili&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.birthYear = <span class="number">2015</span>;</span><br><span class="line">        <span class="built_in">this</span>.sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.presentYear = <span class="number">2018</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getDiscription(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`狗狗叫<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>,性别<span class="subst">$&#123;<span class="built_in">this</span>.sex&#125;</span>,<span class="subst">$&#123;<span class="built_in">this</span>.presentYear&#125;</span>年<span class="subst">$&#123;<span class="built_in">this</span>.presentYear - <span class="built_in">this</span>.birthYear&#125;</span>岁了`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现复制</span></span><br><span class="line">    <span class="keyword">public</span> clone(): Prototype &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="built_in">console</span>.log(dog.getDiscription());</span><br><span class="line">dog.presentYear = <span class="number">2020</span>;</span><br><span class="line"><span class="keyword">const</span> dog1 = <span class="built_in">Object</span>.create(dog);</span><br><span class="line"><span class="built_in">console</span>.log(dog1.getDiscription());</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://segmentfault.com/a/1190000012427846">https://segmentfault.com/a/1190000012427846</a></li>
<li><a href="https://www.runoob.com/design-pattern/prototype-pattern.html">https://www.runoob.com/design-pattern/prototype-pattern.html</a></li>
<li><a href="https://wiki.jikexueyuan.com/project/java-design-pattern/prototype-pattern.html">https://wiki.jikexueyuan.com/project/java-design-pattern/prototype-pattern.html</a></li>
<li><a href="https://www.freesion.com/article/3892642227/">https://www.freesion.com/article/3892642227/</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul>
<li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口 而无须指定它们具体的类</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> username: <span class="built_in">string</span> = <span class="string">&#x27;admin&#x27;</span>, <span class="keyword">public</span> password: <span class="built_in">string</span> = <span class="string">&#x27;123456&#x27;</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> getDetails(): <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">setDetails</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(username, password);</span><br><span class="line">    <span class="comment">// 然后根据不同数据库执行不同的初始用户逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(username, password)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sqlUserName = <span class="built_in">this</span>.username + <span class="string">&#x27;Sql&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> sqlPassWord = <span class="built_in">this</span>.password + <span class="string">&#x27;Sql&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.setDetails(sqlUserName, sqlPassWord)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">username: <span class="built_in">string</span>, password: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(username, password)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mysqlUserName = <span class="built_in">this</span>.username + <span class="string">&#x27;Mysql&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> mysqlPassWord = <span class="built_in">this</span>.password + <span class="string">&#x27;Mysql&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.setDetails(mysqlUserName, mysqlPassWord)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectSql = <span class="keyword">new</span> Sql(<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>)</span><br><span class="line">ConnectSql.getDetails()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectMysql = <span class="keyword">new</span> Mysql(<span class="string">&#x27;cccc&#x27;</span>, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line">ConnectMysql.getDetails()</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903653774458888">https://juejin.im/post/6844903653774458888</a></li>
<li><a href="https://www.runoob.com/design-pattern/factory-pattern.html">https://www.runoob.com/design-pattern/factory-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li>
<li>由于<code>js</code>没有<code>abstract</code>抽象类的概念</li>
<li>因此后续关于抽象类的直接使用<code>ts</code> 模拟,便于理解</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ts中class前面加abstract: 禁止被实例化。是用来被继承的</span></span><br><span class="line"><span class="comment">// 父类指定结构 子类来实现 避免忘记重写方法导致使用默认的方法</span></span><br><span class="line"><span class="comment">// 没有重写直接报错</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抽象方法只能以abstract开头 没有方法体 </span></span><br><span class="line"><span class="comment">// 只能定义在抽象类里面 子类必须重写</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> sayHi():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> username: <span class="built_in">string</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">  <span class="keyword">static</span> password: <span class="built_in">string</span> = <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">  <span class="keyword">abstract</span> getDetails(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Sql.username + <span class="string">&#x27;Sql&#x27;</span>, Sql.password + <span class="string">&#x27;Sql&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mysql</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Mysql.username + <span class="string">&#x27;Mysql&#x27;</span>, Mysql.password + <span class="string">&#x27;Mysql&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDB</span> <span class="keyword">extends</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">getDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(MongoDB.username + <span class="string">&#x27;MongoDB&#x27;</span>, MongoDB.password + <span class="string">&#x27;MongoDB&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectSql = <span class="keyword">new</span> Sql()</span><br><span class="line">ConnectSql.getDetails()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectMysql = <span class="keyword">new</span> Mysql()</span><br><span class="line">ConnectMysql.getDetails()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ConnectMongoDB = <span class="keyword">new</span> MongoDB()</span><br><span class="line">ConnectMongoDB.getDetails()</span><br></pre></td></tr></table></figure>


<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://juejin.im/post/6844903653774458888">https://juejin.im/post/6844903653774458888</a></li>
<li><a href="https://www.runoob.com/design-pattern/factory-pattern.html">https://www.runoob.com/design-pattern/factory-pattern.html</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html">https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/simple_factory.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Patterns</category>
      </categories>
      <tags>
        <tag>Patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用自定义Hook</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h1><h2 id="useDebounce"><a href="#useDebounce" class="headerlink" title="useDebounce"></a>useDebounce</h2><ul>
<li><p>防抖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDebounce</span>(<span class="params">value: any, delay = <span class="number">300</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [debouncedValue, setDebouncedValue] = useState(value)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setDebouncedValue(value)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [value, delay])</span><br><span class="line">  <span class="keyword">return</span> debouncedValue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useDebounce;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useDebounce <span class="keyword">from</span> <span class="string">&#x27;./useDebounce&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useDebounceValue = useDebounce(inputValue, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// 此时只要 把 之前的 表单value 全部换成 useDebounceValue就行了</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useThrottle"><a href="#useThrottle" class="headerlink" title="useThrottle"></a>useThrottle</h2><ul>
<li>节流<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect, useRef,useCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useThrottle</span>(<span class="params">fn, delay, dep = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; current &#125; = useRef(&#123; fn, <span class="attr">timer</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">  useEffect(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    current.fn = fn;</span><br><span class="line">  &#125;, [fn]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> useCallback(<span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!current.timer) &#123;</span><br><span class="line">      current.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> current.timer;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">      current.fn.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, dep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useThrottle</span><br></pre></td></tr></table></figure></li>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useThrottle <span class="keyword">from</span> <span class="string">&#x27;./useThrottle&#x27;</span></span><br><span class="line"><span class="keyword">const</span> throttledFunc = useThrottle(fn, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h2><ul>
<li><p>虚拟列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; RefObject, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface Args <span class="keyword">extends</span> IntersectionObserverInit &#123;</span><br><span class="line">  freezeOnceVisible?: boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ReactRef&#125;</span> </span>elementRef 传入虚拟列表父盒子的 ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * threshold         阀值 0-1 1表示完全出现在屏幕可视区域才触发</span></span><br><span class="line"><span class="comment"> * root              表示指定根元素 默认为浏览器视口  用于检查目标可见性</span></span><br><span class="line"><span class="comment"> * rootMargin        root的外边距 &#x27;0 0 0 0&#x27;  </span></span><br><span class="line"><span class="comment"> * freezeOnceVisible 是否缓存 再次滑动不重新渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>entry 这个对象具有当前可视区的信息 </span></span><br><span class="line"><span class="comment"> * 例如 entry.isIntersecting 是否在可视区范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useVirtualList</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  elementRef: RefObject&lt;Element&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    threshold = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    root = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootMargin = <span class="string">&#x27;0%&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    freezeOnceVisible = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: Args</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">IntersectionObserverEntry</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [entry, setEntry] = useState&lt;IntersectionObserverEntry&gt;()</span><br><span class="line">  <span class="keyword">const</span> frozen = entry?.isIntersecting &amp;&amp; freezeOnceVisible</span><br><span class="line">  <span class="keyword">const</span> updateEntry = ([entry]: IntersectionObserverEntry[]): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setEntry(entry)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = elementRef?.current</span><br><span class="line">    <span class="keyword">const</span> hasIOSupport = !!<span class="built_in">window</span>.IntersectionObserver</span><br><span class="line">    <span class="keyword">if</span> (!hasIOSupport || frozen || !node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> observerParams = &#123; threshold, root, rootMargin &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(updateEntry, observerParams)</span><br><span class="line">    observer.observe(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> observer.disconnect()</span><br><span class="line">  &#125;, [elementRef, <span class="built_in">JSON</span>.stringify(threshold), root, rootMargin, frozen])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useVirtualList </span><br></pre></td></tr></table></figure></li>
<li><p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要判断entry是true还是false就可以得知 他是不是在可视区了</span></span><br><span class="line"><span class="keyword">const</span> Section = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> entry = useVirtualList(ref, &#123;&#125;)</span><br><span class="line">  <span class="comment">// !! 将它转成布尔值 </span></span><br><span class="line">  <span class="keyword">const</span> isVisible = !!entry?.isIntersecting</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Render Section <span class="subst">$&#123;props.title&#125;</span>`</span>, &#123; isVisible &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">minHeight:</span> &#x27;<span class="attr">100vh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">000</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fontSize:</span> &#x27;<span class="attr">2rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        isVisible ? (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ) : &quot;&quot;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">100</span> &#125;).map(<span class="function">(<span class="params">_, index</span>) =&gt;</span> (</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">Section</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">1</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line"> ))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useScrollPostion"><a href="#useScrollPostion" class="headerlink" title="useScrollPostion"></a>useScrollPostion</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取滚动条高度</span></span><br><span class="line"><span class="keyword">import</span> &#123;useState,useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useScrollPostion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [scrollPosition, setScrollPostion] = useState(<span class="number">0</span>)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setScrollPostion(<span class="built_in">window</span>.scrollY)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, handleScroll);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, handleScroll)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> scrollPosition</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useScrollPostion</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useScrollPostion form <span class="string">&#x27;./useScrollPostion&#x27;</span></span><br><span class="line"><span class="keyword">const</span> position = useScrollPostion() </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useWinSize"><a href="#useWinSize" class="headerlink" title="useWinSize"></a>useWinSize</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取屏幕尺寸</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useWinSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = useState(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> onResize = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, onResize)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;reisze&#x27;</span>, onResize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> size</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useWinSize</span><br></pre></td></tr></table></figure>
<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useWinSize form <span class="string">&#x27;./useWinSize&#x27;</span></span><br><span class="line"><span class="keyword">const</span> size = useWinSize()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useIsVisible"><a href="#useIsVisible" class="headerlink" title="useIsVisible"></a>useIsVisible</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否在可视区</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> OPTIONS = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">rootMargin</span>: <span class="string">&quot;0px 0px 0px 0px&quot;</span>,</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useIsVisible = <span class="function">(<span class="params">elementRef</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isVisible, setIsVisible] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementRef.current) &#123;</span><br><span class="line">      <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">        entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">            setIsVisible(<span class="literal">true</span>);</span><br><span class="line">            observer.unobserve(elementRef.current);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, OPTIONS);</span><br><span class="line">      observer.observe(elementRef.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [elementRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isVisible;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useIsVisible;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elemRef = useRef();</span><br><span class="line"><span class="keyword">const</span> isVisible = useVisible(elemRef);</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">145vh</span>&quot;, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125;&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;elemRef&#125;</span>&gt;</span>hello &#123;isVisible &amp;&amp; console.log(&quot;visible&quot;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ignored, forceUpdate] = useReducer(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  forceUpdate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">组件名.forceUpdate(callback)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h2><h3 id="安装TypeScript基本环境"><a href="#安装TypeScript基本环境" class="headerlink" title="安装TypeScript基本环境"></a>安装TypeScript基本环境</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">npm i typescript -g</span><br><span class="line"># 生成ts配置文件</span><br><span class="line">tsc --init</span><br><span class="line"># 手动解析ts文件</span><br><span class="line">tsc xxx.ts </span><br><span class="line"># 监视ts 实时转换js文件</span><br><span class="line">- 在vscode里面终端 输入</span><br><span class="line">  - ctrl+shift+b</span><br><span class="line">  - 监视tsc</span><br><span class="line">- 或者在菜单-终端-运行任务-监视tsconfig.json</span><br></pre></td></tr></table></figure>

<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">如果定义的时候没有赋值，不管之后有没有赋值，</span><br><span class="line">都会被推断成 <span class="built_in">any</span> 类型而完全不被类型检查：</span><br><span class="line">如果定义的时候赋值了  就推断成这个格式</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 开启js提示</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,        </span><br><span class="line">    <span class="comment">// 指定压缩代码生成的目录 随便一个不存在的路径就行</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./random&quot;</span>,   </span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 自动生成 .d.ts 文件 类型校验</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="declare"><a href="#declare" class="headerlink" title="declare"></a>declare</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局类型标注</span></span><br><span class="line"><span class="comment">// 声明不存在的sdk 避免报错</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.css&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.less&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.png&#x27;</span>;</span><br><span class="line"><span class="keyword">interface</span> jQuery &#123;&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;jquery&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = jQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-TS基础"><a href="#2-TS基础" class="headerlink" title="2. TS基础"></a>2. TS基础</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>number</td>
<td></td>
</tr>
<tr>
<td>string</td>
<td>推荐单引号</td>
</tr>
<tr>
<td>Array</td>
<td>Array<number>  || number [ ]  || string [ ] || Array<T></td>
</tr>
<tr>
<td>tuple</td>
<td>元组 固定长度的数组</td>
</tr>
<tr>
<td>Object</td>
<td>任意的JS对象 但是不能调用其他方法 即便它真的有</td>
</tr>
<tr>
<td>any</td>
<td>任意类型</td>
</tr>
<tr>
<td>unknown</td>
<td>类型安全的any    区别是any会把别的也推断成any 他只推断自己</td>
</tr>
<tr>
<td>null</td>
<td>可以赋给其他类型变量  但如果–strictNullChecks 就只能给自己</td>
</tr>
<tr>
<td>undefined</td>
<td>可以赋给其他类型变量  但如果–strictNullChecks 就只能给自己</td>
</tr>
<tr>
<td>void</td>
<td>表示没有任何类型   函数没有返回值他的类型就是void</td>
</tr>
<tr>
<td>never</td>
<td>没有值 不能是任何值: 用于函数没有返回值 例如只用于报错的函数</td>
</tr>
</tbody></table>
<h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?:</td>
<td>可选属性</td>
</tr>
<tr>
<td>!:</td>
<td>非空断言 =&gt; ?.</td>
</tr>
<tr>
<td>readonly</td>
<td>只读</td>
</tr>
<tr>
<td>[xxx:string ]:any</td>
<td>不规定后续内容类型</td>
</tr>
<tr>
<td>enum</td>
<td>枚举 只能赋值为  undefined 和 null</td>
</tr>
<tr>
<td>元组</td>
<td>let x: [number, string] = [10, “jack”]</td>
</tr>
<tr>
<td>|</td>
<td>联合类型                  只能同时为一种</td>
</tr>
<tr>
<td>&amp;</td>
<td>交叉类型                  合并</td>
</tr>
<tr>
<td>Partial</td>
<td>可选类型合并          Partial &lt;xxx &amp; xxx&gt;</td>
</tr>
</tbody></table>
<h2 id="3-基本API"><a href="#3-基本API" class="headerlink" title="3. 基本API"></a>3. 基本API</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 变量: 数据类型</span><br><span class="line"><span class="keyword">var</span> hello: <span class="built_in">string</span> =  <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"># 对象: &#123;对象属性: 数据类型 , ...&#125; = &#123; xxx&#125;</span><br><span class="line"><span class="keyword">var</span> user: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>&#125;=&#123; <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj= &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="comment">// 任意类型 =&gt; 泛型</span></span><br><span class="line"><span class="keyword">var</span> c:&#123;<span class="attr">name</span>:<span class="built_in">string</span>,[xxx: <span class="built_in">string</span>]:<span class="built_in">any</span>&#125;;</span><br><span class="line"># 数组</span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">	[index: <span class="built_in">number</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定某一个数组下的 每一个对象的属性</span></span><br><span class="line">dataSource?: [&#123; [key: <span class="built_in">number</span>]: Interface &#125;]</span><br><span class="line"><span class="comment">// 或者这样</span></span><br><span class="line"><span class="keyword">interface</span> TestArr &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">  [xx: <span class="built_in">number</span>]: TestArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: arr = [&#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">password</span>: <span class="number">555</span> &#125;]</span><br></pre></td></tr></table></figure>

<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动指定某一个值的类型</span></span><br><span class="line"><span class="number">1.</span>值 <span class="keyword">as</span> 类型 </span><br><span class="line">(someValue <span class="keyword">as</span> <span class="built_in">string</span>)  React-jsx必须用这个</span><br><span class="line"><span class="number">2.</span>&lt;类型&gt;值  </span><br><span class="line">(&lt;<span class="built_in">string</span>&gt;someValue)      </span><br></pre></td></tr></table></figure>

<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># base</span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// 接口也可以用</span></span><br><span class="line"><span class="comment">// type str = 接口1 | 接口2</span></span><br><span class="line"><span class="keyword">var</span> str: str = <span class="string">&quot;10&quot;</span></span><br><span class="line">str = <span class="number">10</span></span><br><span class="line"># 限制固定常量</span><br><span class="line"><span class="keyword">type</span> sex = <span class="string">&#x27;男&#x27;</span> | <span class="string">&#x27;女&#x27;</span></span><br><span class="line"># 函数别名</span><br><span class="line"><span class="keyword">type</span> newType = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">s: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: newType = sum</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="comment">// 可选</span></span><br><span class="line">name?:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span> = <span class="number">20</span></span><br><span class="line"># 函数的重载</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">s:<span class="built_in">any</span></span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> s===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我叫:&#x27;</span>+s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我的年龄是&#x27;</span>+s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(getInfo(<span class="string">&#x27;张三&#x27;</span>));   <span class="comment">//正确</span></span><br><span class="line"> <span class="built_in">console</span>.log(getInfo(<span class="number">20</span>));   <span class="comment">//正确</span></span><br><span class="line"><span class="comment">// console.log(getInfo(true));    //错误写法 ts编译报错</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 用于取值 并限定在一定范围  =&gt;  会被编译成一个双向映射的对象</span></span><br><span class="line"> <span class="comment">// 默认从0开始递增 直到枚举进行反向映射</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;</span><br><span class="line">  Sun = <span class="number">3</span>,  <span class="comment">// 一个设置值 其他也要设置</span></span><br><span class="line">  Mon,</span><br><span class="line">  Tue,</span><br><span class="line">  Wed,</span><br><span class="line">  Thu,</span><br><span class="line">  Fri,</span><br><span class="line">  Sat</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xxx = Days.Sun</span><br><span class="line"># 常量枚举</span><br><span class="line"><span class="keyword">const</span> dnum xxx &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-inerface"><a href="#4-inerface" class="headerlink" title="4. inerface"></a>4. inerface</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># base</span><br><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span> | <span class="built_in">number</span>,  <span class="comment">// 只读    </span></span><br><span class="line">   age?: <span class="built_in">number</span>,                   <span class="comment">// 可选</span></span><br><span class="line">   [propsName: <span class="built_in">string</span>]: <span class="built_in">any</span>        <span class="comment">// 任意属性个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user: Person = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;zhuangsan&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"># 接口嵌套</span><br><span class="line"><span class="keyword">interface</span> TestArr &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">  [xx: <span class="built_in">number</span>]: TestArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: arr = [&#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">password</span>: <span class="number">555</span> &#125;]</span><br><span class="line"># 函数接口</span><br><span class="line"><span class="keyword">interface</span> aa &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fm:aa = <span class="function"><span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"># 接口继承</span><br><span class="line"><span class="keyword">interface</span> 接口内的方法 entends 接口名&#123; &#125;</span><br><span class="line"># 接口实现</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> 接口名</span>&#123; &#125;</span><br><span class="line"># 泛型结函数</span><br><span class="line"><span class="keyword">interface</span> Icreate&lt;T&gt;&#123;</span><br><span class="line">  (a:T,<span class="attr">b</span>:T):T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a: Icreate&lt;<span class="built_in">number</span>&gt; = 函数</span><br></pre></td></tr></table></figure>

<h2 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5. 泛型"></a>5. 泛型</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">指不预先指定具体类型 而使用时候再指定 的一种特性</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123; <span class="keyword">return</span> arg &#125; </span><br><span class="line">echo(<span class="string">&#x27;4&#x27;</span>)  echo&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">data: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123; &#125;</span><br><span class="line">T[]</span><br><span class="line"># 约束泛型</span><br><span class="line"><span class="keyword">interface</span> Inter &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Inter</span>&gt;(<span class="params">a: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.length</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>)  <span class="comment">// 报错 数字没有.length 必须要有.length</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 与接口结合</span><br><span class="line"><span class="keyword">interface</span> Icreate &lt;T,U&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>:T;</span><br><span class="line">  age:U;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test:Icreate&lt;<span class="built_in">number</span>,<span class="built_in">string</span>&gt; = &#123;<span class="attr">name</span>:<span class="number">5</span>，age=<span class="string">&quot;ss&quot;</span>&#125;</span><br><span class="line"># 与函数的结合</span><br><span class="line"><span class="keyword">interface</span> Icreate &#123;</span><br><span class="line">  &lt;T&gt;(name: <span class="built_in">string</span>, <span class="attr">value</span>: T): <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aaaaaa: Icreate;</span><br><span class="line">aaaaaa = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">name: <span class="built_in">string</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aaa: <span class="built_in">number</span>[] = aaaaaa(<span class="string">&quot;zzhang&quot;</span>, <span class="number">5</span>)</span><br><span class="line"># 与类的结合</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="attr">name</span>: T;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:T</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xxx = <span class="keyword">new</span> Person&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;张三&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<h2 id="6-class"><a href="#6-class" class="headerlink" title="6. class"></a>6. class</h2><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">#私有属性</span><br></pre></td></tr></table></figure>



<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 遍历属性</span><br><span class="line"><span class="built_in">Object</span>.kes(实例名).forEach(<span class="function"><span class="params">key</span>=&gt;</span>实例名[key])</span><br><span class="line"># 遍历方法</span><br><span class="line">className.prototype 不能通过 forEach遍历 <span class="comment">// 构造函数 可以</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames([className].prototype)</span><br><span class="line">  .forEach(<span class="function"><span class="params">item</span>=&gt;</span>[className].prototype[item])</span><br></pre></td></tr></table></figure>

<h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 匿名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="class"><span class="keyword">class</span> <span class="title">ccc</span> </span>&#123;</span><br><span class="line">  ccc.name</span><br><span class="line">  <span class="comment">// 只有内部可以访问ccc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4个状态"><a href="#4个状态" class="headerlink" title="4个状态"></a>4个状态</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">实例和父类能都访问</span><br></pre></td></tr></table></figure>

<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能父类点出来</span></span><br><span class="line"><span class="comment">// 类似于直接在 Person.prototype.aaaa = &#x27;孙悟空&#x27;</span></span><br><span class="line"><span class="comment">//  constructor() &#123; this.bbb = 12; &#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> aaaa: <span class="built_in">string</span> = <span class="string">&#x27; 孙悟空&#x27;</span>;</span><br><span class="line">  bbb: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(Person.aaaa)</span><br></pre></td></tr></table></figure>

<h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private    私有的         外界无法访问 不能被继承</span></span><br><span class="line">为了避免直接修改 <span class="class"><span class="keyword">class</span>中的属性 产生数据混乱</span></span><br><span class="line"><span class="class">用<span class="title">private</span> 定义属性 拒绝外界访问</span></span><br><span class="line"><span class="class">同时在<span class="title">class</span>内部 定义 <span class="title">getter</span> <span class="title">setter</span> 向外界开放 获取和修改的方法</span></span><br><span class="line"><span class="class">内部可以设计 方法的权限 </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">_name: <span class="built_in">string</span>, _age: <span class="built_in">number</span> = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = _name;</span><br><span class="line">    <span class="built_in">this</span>._age = _age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">per.age = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// protected  受保护的       外界无法访问 可以被继承</span></span><br></pre></td></tr></table></figure>

<h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">readonly</span> ccc: <span class="built_in">string</span> = <span class="string">&#x27;ss&#x27;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> ccc: <span class="built_in">string</span> = <span class="string">&#x27;ss&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="get-set"><a href="#get-set" class="headerlink" title="get set"></a>get set</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动定义 获取和更改方法 的computed </span></span><br><span class="line"><span class="comment">// get 定义的 可以直接点出来 不用调方法</span></span><br><span class="line"><span class="comment">// 如果不是关键字 get 就得使用定义的方法修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">_name: <span class="built_in">string</span>, _age: <span class="built_in">number</span> = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = _name;</span><br><span class="line">    <span class="built_in">this</span>._age = _age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">per.age = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><h4 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"># 或者</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>,<span class="keyword">public</span> age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sss&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, <span class="keyword">type</span>: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, age);</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="keyword">type</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.sayHi()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Cat(<span class="string">&#x27;as&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;asd&#x27;</span>).sayHi()</span><br></pre></td></tr></table></figure>

<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">子类重写方法 在子类中 会覆盖父类的方法</span><br><span class="line"><span class="comment">// 如果要加属性 必须写super 重写属性</span></span><br></pre></td></tr></table></figure>

<h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">implements</span>  需要重写属性和方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">implements</span> 接口</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不用定义 super() 可以重写 属性和方法</span></span><br></pre></td></tr></table></figure>

<h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 抽象类 禁止被实例化 用来被继承的</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 父类指定结构 子类来实现 避免忘记重写方法导致使用默认的方法</span><br><span class="line"><span class="comment">// 抽象方法只能以abstract开头 没有方法体 </span></span><br><span class="line"><span class="comment">// 只能定义在抽象类里面 子类必须重写</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"> <span class="keyword">abstract</span> sayHi():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-装饰器"><a href="#7-装饰器" class="headerlink" title="7. 装饰器"></a>7. 装饰器</h2><ul>
<li>在运行时立即调用 被装饰的声明信息做为参数传入<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Path</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;需要通过柯里化形式拿到参数,默认传入的是target&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">traget: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(name, traget.age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> age: <span class="built_in">number</span> = <span class="number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-高级API"><a href="#8-高级API" class="headerlink" title="8. 高级API"></a>8. 高级API</h2><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选类型</span></span><br><span class="line">Partial &lt;xxx &amp; xxx&gt;</span><br></pre></td></tr></table></figure>

<h3 id="omit"><a href="#omit" class="headerlink" title="omit"></a>omit</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 忽视重写某个属性 </span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> Omit&lt;A, &#x27;a&#x27;&gt; &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象的 key 和 value</span></span><br><span class="line"><span class="keyword">type</span> keys = <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">const</span> result: Record&lt;keys, <span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">A</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">B</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">C</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动推断后续的属性</span></span><br></pre></td></tr></table></figure>

<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ChinaMobilePhones = <span class="string">&#x27;10086&#x27;</span> | <span class="string">&#x27;10010&#x27;</span> | <span class="string">&#x27;10000&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> ChinaMobile &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  website: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ChinaMobileList = &#123;</span><br><span class="line">  [phone <span class="keyword">in</span> ChinaMobilePhones]: ChinaMobile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  set&lt;T <span class="keyword">extends</span> keyof keys&gt;(key: T, <span class="attr">val</span>: keys[T]) &#123; &#125;</span><br><span class="line">  get&lt;T <span class="keyword">extends</span> keyof keys&gt;(key: T): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-工具函数"><a href="#9-工具函数" class="headerlink" title="9. 工具函数"></a>9. 工具函数</h2><h3 id="覆盖接口类型"><a href="#覆盖接口类型" class="headerlink" title="覆盖接口类型"></a>覆盖接口类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 覆盖接口属性</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns object T, but with T[K] overridden to type U.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * type MyObject = &#123; a: number, b: string &#125;</span></span><br><span class="line"><span class="comment"> * OverrideProperty&lt;MyObject, &quot;a&quot;, string&gt; // returns &#123; a: string, b: string &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> OverrideProperty&lt;T, K <span class="keyword">extends</span> keyof T, U&gt; = Omit&lt;T, K&gt; &amp; &#123; [P <span class="keyword">in</span> keyof Pick&lt;T, K&gt;]: U &#125;;</span><br><span class="line"># 第二种方法</span><br><span class="line"><span class="keyword">type</span> Modify&lt;T, R&gt; = Omit&lt;T, keyof R&gt; &amp; R;</span><br></pre></td></tr></table></figure>

<h2 id="10-react接口"><a href="#10-react接口" class="headerlink" title="10. react接口"></a>10. react接口</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># react组件接口</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, ButtonHTMLAttributes, AnchorHTMLAttributes &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>:<span class="title">FC</span>&lt;泛型&gt; <span class="keyword">extends</span> <span class="title">React</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"># react组件props接口</span><br><span class="line">React.ComponentProps&lt;<span class="string">&#x27;button&#x27;</span>&gt;</span><br><span class="line"># css</span><br><span class="line">React.CSSProperties</span><br><span class="line"># children</span><br><span class="line">React.FunctionComponentElement</span><br><span class="line"># 事件</span><br><span class="line">onChange?: <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"># promise</span><br><span class="line">Promist&lt;<span class="built_in">string</span>[]&gt;</span><br><span class="line"># 键盘事件</span><br><span class="line"><span class="attr">e</span>:React.KeyboardEvent</span><br><span class="line"># ref</span><br><span class="line">React.RefObject&lt;HTMLElement&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用在线vscode打开github仓库</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>作为一个 <code>github</code> 的使用者。。。我竟然不知道 略显尴尬</li>
<li>之前一直是通过 chrome 插件 <code>Octotree-Github code tree</code>  来查看仓库文件结构</li>
<li>和 <code>vscode</code> 打开 简直 <code>low</code> 暴了</li>
<li>如果你也不知道那就赶紧来试试吧</li>
</ul>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul>
<li><ol>
<li>直接在网址 xxx.github.com 的 github 后面加 <code>1s</code></li>
</ol>
<ul>
<li>例如: <a href="https://github.com/conwnet/github1s">https://github.com/conwnet/github1s</a></li>
<li>To: <a href="https://github1s.com/conwnet/github1s">https://github1s.com/conwnet/github1s</a></li>
</ul>
</li>
<li><ol start="2">
<li>直接按中文的 句号按钮</li>
</ol>
<ul>
<li>有的网址可以有的网址不行</li>
</ul>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/conwnet/github1s">github1s</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的GitHub-Badge</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>大家一定在浏览 <code>github</code> 的时候有看到过这样漂亮的徽标</li>
<li>其实他的使用方式也非常简单</li>
<li><img class="inline-img" src="/img/badge.jpg" style="height:300px"/></li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li><a href="https://simpleicons.org/">Simple Icons官网图标列表</a><ul>
<li>这里可以看到各式各样的图标</li>
<li>而他的名字就是后续配置需要的logo名</li>
<li>此外基础配色也最好以它的为准 比较美观</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 字段配置如下</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//shields.io/badge/左边文字-右边文字-右边颜色?logo=图标名称&amp;logoColor=ffffff&amp;style=样式</span></span><br><span class="line"># demo =&gt; github 徽标</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//img.shields.io/badge/-fff?style=flat-square&amp;logo=Github&amp;logoColor=000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此外。还有些细节配置<ul>
<li>徽章实体风格: <code>style= plastic | flat | flag-square | for-the-badge | social</code></li>
<li>外观有不同的效果 自己可以挨个尝试下</li>
</ul>
</li>
<li>其次 <code>badge</code> 后边 也可以直接跟一个 <code>svg</code> 地址 </li>
</ul>
<h2 id="github主页使用"><a href="#github主页使用" class="headerlink" title="github主页使用"></a>github主页使用</h2><ul>
<li>创建一个和自己<code>github</code>名字 同名的仓库</li>
<li>在这个仓库里创建 <code>README.md</code></li>
<li>在这个里面的内容就自动展示在首页啦</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架响应式原理-手写响应式</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h2><ul>
<li>大家都知道前端的三大框架是具有响应式的。但是其实他们内部实现的原理却是不一样的</li>
<li>这里就将手写各大前端框架的响应性 <code>demo</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react =&gt; 一个函数重写 onChange 和 value</span><br><span class="line"><span class="comment">// &lt;input </span></span><br><span class="line"><span class="comment">//   value=&quot;state.xxx&quot; </span></span><br><span class="line"><span class="comment">//   onchange=&quot;()=&gt;&#123; setState(xxx)&#125;&quot;</span></span><br><span class="line"><span class="comment">// /&gt;</span></span><br><span class="line">vue =&gt; object.definedProperty =&gt; proxy</span><br><span class="line">anguluar =&gt; 脏数据 检测所有的数据 拦截</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><h4 id="object-definedProperty"><a href="#object-definedProperty" class="headerlink" title="object.definedProperty"></a>object.definedProperty</h4><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul>
<li><code>object.definedProperty</code>是<code>js ES6</code>的<code>API</code></li>
<li>提供了对于对象的拦截处理的能力<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;foo&#x27;</span>,&#123;</span><br><span class="line">  	<span class="attr">value</span>: </span><br><span class="line">  	<span class="comment">// 不允许重复定义</span></span><br><span class="line">  	configurable:<span class="literal">false</span>,</span><br><span class="line">  	<span class="comment">// 不允许迭代</span></span><br><span class="line">  	<span class="attr">enumerable</span>: fasle,</span><br><span class="line">  	<span class="comment">// 不允许重复赋值</span></span><br><span class="line">  	<span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  	<span class="attr">get</span>:</span><br><span class="line">  	set:</span><br><span class="line">&#125;)</span><br><span class="line">#</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj,&#123;</span><br><span class="line">  <span class="attr">foo</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> internalValue = obj[key]</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`get<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;internalValue&#125;</span>`</span>);</span><br><span class="line">          <span class="keyword">return</span> internalValue;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`get<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;internalValue&#125;</span>`</span>);</span><br><span class="line">          internalValue = newValue</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">sads</span>: <span class="number">2</span> &#125;</span><br><span class="line">  convert(obj)</span><br><span class="line">  <span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="订阅者模式"><a href="#订阅者模式" class="headerlink" title="订阅者模式"></a>订阅者模式</h4><h5 id="依赖跟踪"><a href="#依赖跟踪" class="headerlink" title="依赖跟踪"></a>依赖跟踪</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// depend notify:当依赖更改的时候重新执行</span></span><br><span class="line"><span class="comment">// 当调用 dep.notify() 就重新执行</span></span><br><span class="line"><span class="comment">// () =&gt; &#123; dep.depend() console.log(&#x27;updated&#x27;) &#125;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="title">depend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">          <span class="built_in">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> activeUpdate</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autorun</span>(<span class="params">update</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当依赖关系变化的时候 重新执行autoru内部的东西</span></span><br><span class="line">        activeUpdate = wrappedUpdate</span><br><span class="line">        update()</span><br><span class="line">        activeUpdate = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      dep.depend()</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// should log: &quot;updated&quot;</span></span><br><span class="line"></span><br><span class="line">    dep.notify()</span><br><span class="line">    <span class="comment">// should log: &quot;updated&quot;</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="observe"><a href="#observe" class="headerlink" title="observe"></a>observe</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">      &amp;&amp; !<span class="built_in">Array</span>.isArray(obj)</span><br><span class="line">      &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">      &amp;&amp; obj !== <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(obj)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalValue = obj[key]</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">return</span> internalValue</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        <span class="keyword">const</span> isChanged = internalValue !== newValue</span><br><span class="line">        <span class="keyword">if</span> (isChanged) &#123;</span><br><span class="line">          internalValue = newValue</span><br><span class="line">          dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="comment">// register the current active update as a subscriber</span></span><br><span class="line">      <span class="built_in">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// run all subscriber functions</span></span><br><span class="line">    <span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">subscriber</span> =&gt;</span> subscriber())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">observe(state)</span><br><span class="line">autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(state.count)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// should immediately log &quot;count is: 0&quot;</span></span><br><span class="line">state.count++</span><br><span class="line"><span class="comment">// should log &quot;count is: 1&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h4><ul>
<li>未完待续</li>
</ul>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul>
<li>未完待续</li>
</ul>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><ul>
<li>未完待续</li>
</ul>
]]></content>
      <categories>
        <category>soundCode</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>React</tag>
        <tag>Angular</tag>
        <tag>soundCode</tag>
      </tags>
  </entry>
  <entry>
    <title>链表逆序两数相加</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</li>
<li>请你将两个数相加，并以相同形式返回一个表示和的链表。</li>
<li>你可以假设除了数字 0 之外，这两个数都不会以 0 开头</li>
</ul>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 虚拟头结点（构建新链表时的常用技巧）</span></span><br><span class="line">  <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 指针 p 负责构建新链表</span></span><br><span class="line">  <span class="keyword">let</span> p = dummy;</span><br><span class="line">  <span class="comment">// 记录进位</span></span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 开始执行加法，两条链表走完且没有进位时才能结束循环</span></span><br><span class="line">  <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 先加上上次的进位</span></span><br><span class="line">    <span class="keyword">let</span> val = carry;</span><br><span class="line">    <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">      val += l1.val;</span><br><span class="line">      l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">      val += l2.val;</span><br><span class="line">      l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理进位情况</span></span><br><span class="line">    carry = <span class="built_in">Math</span>.floor(val / <span class="number">10</span>);</span><br><span class="line">    val = val % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 构建新节点</span></span><br><span class="line">    p.next = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果链表的头结点（去除虚拟头结点）</span></span><br><span class="line">  <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li><a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1. 解决方法"></a>1. 解决方法</h2><h3 id="1-1-通过-Set"><a href="#1-1-通过-Set" class="headerlink" title="1.1 通过 Set"></a>1.1 通过 Set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般工作中我都直接采用 set 进行集合运算 比较方便和容易理解</span></span><br><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> expectNumber = [...new <span class="built_in">Set</span>([...scores])].length <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-通过-filter"><a href="#1-2-通过-filter" class="headerlink" title="1.2 通过 filter"></a>1.2 通过 filter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// 通过indexOf 让filter过滤掉多余的值</span></span><br><span class="line"><span class="keyword">let</span> expectNumber =scores.filter(<span class="function">(<span class="params">ele, index, arr</span>) =&gt;</span> arr.indexOf(ele)== index).length; <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h2 id="2-题源"><a href="#2-题源" class="headerlink" title="2. 题源:"></a>2. 题源:</h2><ul>
<li><a href="https://leetcode-cn.com/problems/qi-wang-ge-shu-tong-ji/">LCP 11.期望个数统一</a></li>
<li>看了半天没看懂题目是什么意思 。。于是回顾了下 数学期望值</li>
<li>数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和</li>
<li>举个例子 一个骰子 他能摇出来的所有结果的总和 就是他的期望值<ul>
<li>即只可能是 <code>[1,2,3,4,5,6]</code></li>
<li>不可能为<code>[2.5,...]</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code></li>
<li>请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标。<ul>
<li>例如 <code>nums = [2,7,11,15], target = 9,</code> 结果是: 返回 <code>[0, 1]</code></li>
</ul>
</li>
</ul>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">const</span> target = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> diff = target - nums[i]</span><br><span class="line">  <span class="keyword">if</span>(hash.has(diff))&#123;</span><br><span class="line">    <span class="keyword">return</span> [hash.get(diff),i]</span><br><span class="line">  &#125;</span><br><span class="line">  hash.set(nums[i],i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>css使用js中的变量var()</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h1><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>这篇文章所指的<code>css</code>变量, 并不是指 <code>less</code> 等预编译语言的变量<code>(@)</code></li>
<li>而是直接在 <code>.css</code> 页面中使用 <code>.js|.html</code> 中所定义的变量 (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var()">var()-mdn</a>)</li>
<li>一般情况下 前端样式只要通过 js动态切换不同类名 行内样式</li>
<li>就可以在<code>React Vue</code> 中完成绝大多数的需求了</li>
<li>但是有些使用场景就需要原生 <code>css</code> 的 <code>var()</code> 变量。 或者说使用他可以达到更加方便的效果<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设使用了一个组件库的一个小圆点, 而他内部是通过伪元素做的</span></span><br><span class="line"><span class="comment">// 此时的需求是 小圆点的颜色由用户决定,不是一个固定的值,你该如何控制呢?</span></span><br><span class="line"><span class="comment">// 我们通常的做法是 </span></span><br><span class="line"><span class="comment">//    1.定义不同的类名切换:  x =&gt; 颜色不是一个固定的值</span></span><br><span class="line"><span class="comment">//    2.行内样式直接传递:   x =&gt; 行内样式不能修改伪元素</span></span><br><span class="line"><span class="comment">//    3.自己重写:         x =&gt; 麻烦,这里只是一个用例,某些场景会极其繁琐</span></span><br><span class="line"><span class="comment">//    4.css in js       x =&gt; 公司项目一般不用这个 </span></span><br><span class="line"><span class="comment">//    5.dom操作          x =&gt; 不推荐</span></span><br><span class="line">这时候<span class="keyword">var</span>()就应运而生了</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原生html"><a href="#原生html" class="headerlink" title="原生html"></a>原生html</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># index.html </span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #dv &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="keyword">var</span>(--color);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> clickColor = <span class="string">&#x27;cornflowerblue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;dv&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    dv.innerHTML = <span class="string">`&lt;div id=&#x27;dv&#x27; style=&quot;--color:<span class="subst">$&#123;myColor&#125;</span>&quot;&gt;css&lt;/div&gt;`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./app.module.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clickColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> style = &#123; <span class="string">&quot;--color&quot;</span>: clickColor&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">#</span><br><span class="line">.header &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">var</span>(--color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tsx"><a href="#tsx" class="headerlink" title="tsx"></a>tsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./app.module.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clickColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> style = &#123; <span class="string">&quot;--color&quot;</span>: clickColor&#125; <span class="keyword">as</span> React.CSSProperties;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">#</span><br><span class="line">.header &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">var</span>(--color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;spanStyle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;--color:red&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">spanStyle</span>: &#123; <span class="string">&quot;--color&quot;</span>: <span class="string">&quot;green&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.span1</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">	<span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># vue3提供了API 直接v-bind就可以使用了</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.span1 &#123;</span><br><span class="line">	<span class="attr">color</span>: v-bind(变量);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS挟持攻击</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="CSS劫持攻击"><a href="#CSS劫持攻击" class="headerlink" title="CSS劫持攻击"></a>CSS劫持攻击</h1><p><code>CSS</code>劫持是一种并不很受重视的劫持方式，但是其也有一定的危害，且由于其并不一定需要依赖<code>JavaScript</code>，这使得此种攻击方式更容易实现。</p>
<h2 id="ClickJacking点击劫持"><a href="#ClickJacking点击劫持" class="headerlink" title="ClickJacking点击劫持"></a>ClickJacking点击劫持</h2><p>当访问某网站时，利用<code>CSS</code>将攻击者实际想让你点击的页面进行透明化隐藏，然后在页面后显示 一些东西诱导让你点击，点击后则会在用户毫不知情的情况下做了某些操作，这就是点击劫持<code>ClickJacking</code>。</p>
<h3 id="iframe覆盖"><a href="#iframe覆盖" class="headerlink" title="iframe覆盖"></a>iframe覆盖</h3><p>假如现在我们有个贴吧，想让人关注，可以构造一个钓鱼页面，诱导用户点击，实际上攻击者想要用户点击的关注页面是个透明的，用户如果在网页端登录了贴吧，就会在毫不知情的情况下关注了贴吧，这属于危害较小的情况，若是搭配一些表单诱导用户在页面输入某些敏感信息甚至可以构成财产损失的情况。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ClickJacking点击劫持<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">     <span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">iframe</span>&#123;</span></span><br><span class="line"><span class="css">         <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="css">          <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">border</span>:none;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">iframe</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">opacity</span>:<span class="number">0.2</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">          <span class="attribute">z-index</span>:<span class="number">2</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">          <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="css">          <span class="attribute">position</span>:absolute;</span></span><br><span class="line"><span class="css">          <span class="attribute">top</span>: <span class="number">335px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">left</span>: <span class="number">310px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">height</span>: <span class="number">26px</span>;</span></span><br><span class="line"><span class="css">     &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 例子中的按钮位置是写定的，在不同分辨率下并不一定合适，应该动态确定按钮位置，但是作为一个Demo就不作过多操作了 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>那些不能说的秘密<span class="tag">&lt;<span class="name">button</span>&gt;</span>查看详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://tieba.baidu.com/f?kw=%E6%96%97%E7%A0%B4%E8%8B%8D%E7%A9%B9%E5%8A%A8%E6%BC%AB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p><code>X-FRAME-OPTIONS</code>是目前最可靠的方法。<br><code>X-FRAME-OPTIONS</code>是微软提出的一个<code>HTTP</code>头，专门用来防御利用<code>iframe</code>嵌套的点击劫持攻击。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">DENY <span class="regexp">//</span> 拒绝任何域加载</span><br><span class="line">SAMEORIGIN <span class="regexp">//</span> 允许同源域下加载</span><br><span class="line">ALLOW-FROM <span class="regexp">//</span> 可以定义允许frame加载的页面地址</span><br></pre></td></tr></table></figure>

<h2 id="CSS劫持流量"><a href="#CSS劫持流量" class="headerlink" title="CSS劫持流量"></a>CSS劫持流量</h2><p>关于诱导用户点击进入网站的操作，利用<code>CSS</code>劫持也不失为一个好的思路，无论是论坛，还是邮件都有一个富文本编辑器，如果网站并未注意此种攻击方式并特殊处理，便很容易被利用。<br>将富文本插入一个链接，在正常情况下应该是<code>&lt;a href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>，假如我们为其赋予一个样式，或者将其内部包裹一个字体的样式，将样式设置为<code>display: block;z-index: 100000;position: fixed;top: 0;left: 0;width: 1000000px;height: 100000px;</code>,也是就是让链接作为块级元素充满整个屏幕，则用户无论点击页面中的任何地方都会跳转到你指定的页面，这就将流量劫持到了你的页面，若用户并未注意到<code>url</code>的改变，还可以在跳转的新页面进行钓鱼，对于这种攻击方式通常可以采用<code>CSS</code>隔离的方式解决，例如<code>css module</code>、<code>shadow dom</code>，<code>namespace</code>等。</p>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议概述</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="HTTP协议概述"><a href="#HTTP协议概述" class="headerlink" title="HTTP协议概述"></a>HTTP协议概述</h1><p><code>HTTP</code>超文本传输协议，基于<code>TCP/IP</code>通信协议传输数据。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li><code>HTTP</code>是无连接的：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li>
<li><code>HTTP</code>是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过<code>HTTP</code>发送，在<code>HTTP</code>中使用<code>Content-Type</code>来表明资源媒体类型。</li>
<li><code>HTTP</code>是无状态的：<code>HTTP</code>协议是无状态协议，指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li>
</ul>
<h2 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h2><p><code>HTTP1.0</code>定义了三种请求方法：<code>GET</code>、<code>POST</code>、<code>HEAD</code>方法。<br><code>HTTP1.1</code>新增了六种请求方法：<code>OPTIONS</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>、<code>TRACE</code>和<code>CONNECT</code>方法。</p>
<ul>
<li><code>GET</code>: 请求指定的页面信息，并返回实体主体。由于各浏览器对于<code>URL</code>的长度都有限制，一般使用不超过<code>4K</code>。</li>
<li><code>POST</code>: 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中，<code>POST</code> 请求可能会导致新的资源的建立和/或已有资源的修改，其请求携带的最大资源大小由服务器设定。</li>
<li><code>HEAD</code>: 类似于<code>GET</code>请求，只不过返回的响应中没有具体的内容，用于获取报头。</li>
<li><code>PUT</code>: 从客户端向服务器传送的数据取代指定的文档的内容。</li>
<li><code>DELETE</code>: 请求服务器删除指定的页面。</li>
<li><code>CONNECT</code>: 可以开启一个客户端与所请求资源之间的双向沟通的通道，它可以用来创建隧道<code>tunnel</code>。</li>
<li><code>OPTIONS</code>: 用于获取目的资源所支持的通信选项。</li>
<li><code>TRACE</code>: 实现沿通向目标资源的路径的消息环回<code>loop-back</code>测试 ，提供了一种实用的<code>debug</code> 机制。</li>
<li><code>PATCH</code>: 是对<code>PUT</code>方法的补充，用来对已知资源进行局部更新 。</li>
</ul>
<h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><ul>
<li><code>Accept</code>: 指定客户端能够接收的内容类型。</li>
<li><code>Accept-Charset</code>: 浏览器可以接受的字符编码集。</li>
<li><code>Accept-Encoding</code>: 指定浏览器可以支持的<code>web</code>服务器返回内容压缩编码类型。</li>
<li><code>Accept-Language</code>: 浏览器可接受的语言。</li>
<li><code>Accept-Ranges</code>: 可以请求网页实体的一个或者多个子范围字段。</li>
<li><code>Authorization</code>: <code>HTTP</code>授权的授权证书。</li>
<li><code>Cache-Control</code>: 指定请求和响应遵循的缓存机制。</li>
<li><code>Connection</code>: 表示是否需要持久连接。</li>
<li><code>Cookie</code>: HTTP请求发送时，会把保存在该请求域名下的所有<code>cookie</code>值一起发送给<code>web</code>服务器。</li>
<li><code>Content-Length</code>: 请求的内容长度。</li>
<li><code>Content-Type</code>: 请求的与实体对应的<code>MIME</code>信息。</li>
<li><code>Date</code>: 请求发送的日期和时间。</li>
<li><code>Expect</code>: 请求的特定的服务器行为。</li>
<li><code>From</code>: 发出请求的用户的<code>Email</code>。</li>
<li><code>Host</code>: 指定请求的服务器的域名和端口号。</li>
<li><code>If-Match</code>: <code>HTTP</code>请求报头使得所述请求为条件。对于<code>GET</code>和<code>HEAD</code>方法，服务器将只在与请求的资源匹配时发回请求的资源<code>ETags</code>。对于<code>PUT</code>和其他非安全方法，在这种情况下它只会上传资源。</li>
<li><code>If-Modified-Since</code>: 如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回<code>304</code>代码。</li>
<li><code>If-None-Match</code>: 如果内容未改变返回<code>304</code>代码，参数为服务器先前发送的<code>Etag</code>，与服务器回应的<code>Etag</code>比较判断是否改变。</li>
<li><code>If-Range</code>: 如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体，参数也为<code>Etag</code>。</li>
<li><code>If-Unmodified-Since</code>: 只在实体在指定时间之后未被修改才请求成功。</li>
<li><code>Max-Forwards</code>: 限制信息通过代理和网关传送的时间。</li>
<li><code>Pragma</code>: 用来包含实现特定的指令。</li>
<li><code>Proxy-Authorization</code>: 包含用于向代理服务器认证用户代理的凭证，通常在服务器响应<code>407</code> <code>Proxy Authentication Required</code>状态和<code>Proxy-Authenticate</code>标题后。</li>
<li><code>Range</code>: 只请求实体的一部分，指定范围</li>
<li><code>Referer</code>: 先前网页的地址，当前请求网页紧随其后，即来路。</li>
<li><code>TE</code>: 客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息。</li>
<li><code>Upgrade</code>: 向服务器指定某种传输协议以便服务器进行转换(如果支持)。</li>
<li><code>User-Agent</code>: <code>User-Agent</code>的内容包含发出请求的用户信息。</li>
<li><code>Via</code>: 通知中间网关或代理服务器地址，通信协议。</li>
<li><code>Warning</code>: 关于消息实体的警告信息。</li>
<li><code>X-Forwarded-For</code>: <code>XFF</code>是用于通过<code>HTTP</code>代理或负载平衡器识别连接到<code>web</code>服务器的客户端的发起<code>IP</code>地址的事实上的标准报头。</li>
<li><code>X-Forwarded-Host</code>: <code>XFH</code>是用于识别由客户机在所要求的原始主机一个事实上的标准报头<code>Host</code>的<code>HTTP</code>请求报头。</li>
<li><code>X-Forwarded-Proto</code>: <code>XFP</code>用于识别协议<code>HTTP</code>或<code>HTTPS</code>，其中使用的客户端连接到代理或负载平衡器一个事实上的标准报头。</li>
</ul>
<h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h2><ul>
<li><code>Accept-Ranges</code>: 表明服务器是否支持指定范围请求及哪种类型的分段请求。</li>
<li><code>Age</code>: 从原始服务器到代理缓存形成的估算时间。</li>
<li><code>Allow</code>: 对某网络资源的有效的请求行为，不允许则返回<code>405</code>。</li>
<li><code>Cache-Control</code>: 告诉所有的缓存机制是否可以缓存及哪种类型。</li>
<li><code>Content-Encoding</code>: <code>web</code>服务器支持的返回内容压缩编码类型。</li>
<li><code>Content-Language</code>: 响应体的语言。</li>
<li><code>Content-Length</code>: 响应体的长度。</li>
<li><code>Content-Location</code>: 请求资源可替代的备用的另一地址。</li>
<li><code>Content-MD5</code>: 返回资源的<code>MD5</code>校验值。</li>
<li><code>Content-Range</code>: 在整个返回体中本部分的字节位置。</li>
<li><code>Content-Type</code>: 返回内容的<code>MIME</code>类型。</li>
<li><code>Date</code>: 原始服务器消息发出的时间。</li>
<li><code>ETag</code>: 请求变量的实体标签的当前值。</li>
<li><code>Expires</code>: 响应过期的日期和时间。</li>
<li><code>Last-Modified</code>: 请求资源的最后修改时间。</li>
<li><code>Location</code>: 用来重定向接收方到非请求<code>URL</code>的位置来完成请求或标识新的资源。</li>
<li><code>Pragma</code>: 包括实现特定的指令，它可应用到响应链上的任何接收方。</li>
<li><code>Proxy-Authenticate</code>: 它指出认证方案和可应用到代理的该<code>URL</code>上的参数。</li>
<li><code>refresh</code>: 应用于重定向或一个新的资源被创造，在5秒之后重定向。</li>
<li><code>Retry-After</code>: 如果实体暂时不可取，通知客户端在指定时间之后再次尝试。</li>
<li><code>Server</code>: <code>web</code>服务器软件名称。</li>
<li><code>Set-Cookie</code>: 设置<code>Http Cookie</code>。</li>
<li><code>Trailer</code>: 指出头域在分块传输编码的尾部存在。</li>
<li><code>Transfer-Encoding</code>: 文件传输编码。</li>
<li><code>Vary</code>: 告诉下游代理是使用缓存响应还是从原始服务器请求。</li>
<li><code>Via</code>: 告知代理客户端响应是通过哪里发送的。</li>
<li><code>Warning</code>: 警告实体可能存在的问题。</li>
<li><code>WWW-Authenticate</code>: 表明客户端请求实体应该使用的授权方案。</li>
<li><code>X-Frame-Options</code>: 可以被用来指示一个浏览器是否应该被允许在一个以呈现页面<code>&lt;frame&gt;</code>，<code>&lt;iframe&gt;</code>或<code>&lt;object&gt;</code>。通过确保其内容未嵌入其他网站，网站可以使用此功能来避免点击劫持攻击。</li>
<li><code>X-XSS-Protection</code>: 可在检测到反射的跨站点脚本<code>XSS</code>攻击时阻止页面加载。</li>
</ul>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><h3 id="五种类型"><a href="#五种类型" class="headerlink" title="五种类型"></a>五种类型</h3><ul>
<li><code>1xx</code>: 信息，服务器收到请求，需要请求者继续执行操作。</li>
<li><code>2xx</code>: 成功，操作被成功接收并处理。</li>
<li><code>3xx</code>: 重定向，需要进一步的操作以完成请求。</li>
<li><code>4xx</code>: 客户端错误，请求包含语法错误或无法完成请求。</li>
<li><code>5xx</code>: 服务器错误，服务器在处理请求的过程中发生了错误。</li>
</ul>
<h3 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h3><ul>
<li><code>100</code> <code>Continue</code>: 继续，客户端应继续其请求。</li>
<li><code>101</code> <code>Switching Protocols</code>:  切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到<code>HTTP</code>的新版本协议。</li>
<li><code>200</code> <code>OK</code>: 请求成功。一般用于<code>GET</code>与<code>POST</code>请求。</li>
<li><code>201</code> <code>Created</code>: 已创建。成功请求并创建了新的资源。</li>
<li><code>202</code> <code>Accepted</code>: 已接受。已经接受请求，但未处理完成。</li>
<li><code>203</code> <code>Non-Authoritative Information</code>:    非授权信息。请求成功。但返回的<code>meta</code>信息不在原始的服务器，而是一个副本。</li>
<li><code>204</code> <code>No Content</code>: 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</li>
<li><code>205</code> <code>Reset Content</code>: 重置内容。服务器处理成功，用户终端应重置文档视图。可通过此返回码清除浏览器的表单域。</li>
<li><code>206</code> <code>Partial Content</code>: 部分内容。服务器成功处理了部分<code>GET</code>请求。</li>
<li><code>300</code> <code>Multiple Choices</code>: 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端选择。</li>
<li><code>301</code> <code>Moved Permanently</code>: 永久移动。请求的资源已被永久的移动到新<code>URI</code>，返回信息会包括新的<code>URI</code>，浏览器会自动定向到新<code>URI</code>。今后任何新的请求都应使用新的<code>URI</code>代替。</li>
<li><code>302</code> <code>Found</code>: 临时移动，与<code>301</code>类似，但资源只是临时被移动，客户端应继续使用原有<code>URI</code>。</li>
<li><code>303</code> <code>See Other</code>: 查看其它地址。与<code>301</code>类似。使用<code>GET</code>和<code>POST</code>请求查看。</li>
<li><code>304</code> <code>Not Modified</code>: 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</li>
<li><code>305</code> <code>Use Proxy</code>: 使用代理，所请求的资源必须通过代理访问。</li>
<li><code>306</code> <code>Unused</code>: 已经被废弃的<code>HTTP</code>状态码。</li>
<li><code>307</code> <code>Temporary Redirect</code>: 临时重定向，与<code>302</code>类似。使用<code>GET</code>请求重定向。</li>
<li><code>400</code> <code>Bad Request</code>: 客户端请求的语法错误，服务器无法理解。</li>
<li><code>401</code> <code>Unauthorized</code>: 请求要求用户的身份认证。</li>
<li><code>402</code> <code>Payment Required</code>: 保留，将来使用。</li>
<li><code>403</code> <code>Forbidden</code>: 服务器理解请求客户端的请求，但是拒绝执行此请求。</li>
<li><code>404</code> <code>Not Found</code>: 服务器无法根据客户端的请求找到资源。</li>
<li><code>405</code> <code>Method Not Allowed</code>: 客户端请求中的方法被禁止。</li>
<li><code>406</code> <code>Not Acceptable</code>: 服务器无法根据客户端请求的内容特性完成请求。</li>
<li><code>407</code> <code>Proxy Authentication Required</code>: 请求要求代理的身份认证，与<code>401</code>类似，但请求者应当使用代理进行授权。</li>
<li><code>408</code> <code>Request Time-out</code>: 服务器等待客户端发送的请求时间过长，超时。</li>
<li><code>409</code> <code>Conflict</code>: 服务器完成客户端的<code>PUT</code> 请求时可能返回此代码，服务器处理请求时发生了冲突。</li>
<li><code>410</code> <code>Gone</code>: 客户端请求的资源已经不存在。<code>410</code>不同于<code>404</code>，如果资源以前有现在被永久删除了可使用<code>410</code>代码，网站设计人员可通过<code>301</code>代码指定资源的新位置。</li>
<li><code>411</code> <code>Length Required</code>: 服务器无法处理客户端发送的不带<code>Content-Length</code>的请求信息。</li>
<li><code>412</code> <code>Precondition Failed</code>: 客户端请求信息的先决条件错误。</li>
<li><code>413</code> <code>Request Entity Too Large</code>: 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个<code>Retry-After</code>的响应信息。</li>
<li><code>414</code> <code>Request-URI Too Large</code>: 请求的<code>URI</code>过长，服务器无法处理。</li>
<li><code>415</code> <code>Unsupported Media Type</code>: 服务器无法处理请求附带的媒体格式。</li>
<li><code>416</code> <code>Requested range not satisfiable</code>: 客户端请求的范围无效。</li>
<li><code>417</code> <code>Expectation Failed</code>: 服务器无法满足<code>Expect</code>的请求头信息。</li>
<li><code>500</code> <code>Internal Server Error</code>: 服务器内部错误，无法完成请求。</li>
<li><code>501</code> <code>Not Implemented</code>: 服务器不支持请求的功能，无法完成请求。</li>
<li><code>502</code> <code>Bad Gateway</code>:  作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</li>
<li><code>503</code> <code>Service Unavailable</code>:  由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的<code>Retry-After</code>头信息中</li>
<li><code>504</code> <code>Gateway Time-out</code>: 充当网关或代理的服务器，未及时从远端服务器获取请求。</li>
<li><code>505</code> <code>HTTP Version not supported</code>: 服务器不支持请求的<code>HTTP</code>协议的版本，无法完成处理。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://cloud.tencent.com/developer/doc/1117">https://cloud.tencent.com/developer/doc/1117</a></li>
<li><a href="https://www.runoob.com/http/http-tutorial.html">https://www.runoob.com/http/http-tutorial.html</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p><code>SQL</code>注入即是指<code>web</code>应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在<code>web</code>应用程序中事先定义好的查询语句添加额外的<code>SQL</code>语句，从而实现非法操作，获取数据库数据，服务器提权等，很多机构将<code>SQL</code>注入作为第一危险的安全漏洞。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>SQL</code>注入攻击是通过操作输入来修改<code>SQL</code>语句，用以达到执行代码对<code>WEB</code>服务器进行攻击的方法。简单的说就是在<code>post/get</code>表单、输入域名或页面请求的查询字符串中插入<code>SQL</code>命令，最终使<code>web</code>服务器执行恶意命令的过程。<br><code>SQL</code>注入语句一般都嵌入在普通的<code>HTTP</code>请求中，比较难过滤，攻击者可以不断调整攻击的参数，导致<code>SQL</code>注入变种极多，而且互联网上有很多<code>SQL</code>注入工具，不需要专业知识也能自如运用。</p>
<h2 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h2><p>首先建立简单表，在<code>user_info</code>中写入账号<code>acc</code>与密码<code>pwd</code>，<code>qqq</code>表用来测试<code>drop</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>gbk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `qqq` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>gbk;</span><br></pre></td></tr></table></figure>
<p>加入后端查询数据库使用此<code>SQL</code>进行查询，通过用户输入的数据进行拼接，查询结果等于<code>1</code>即作为登录成功，此查询结果明显等于<code>1</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> account <span class="operator">=</span> <span class="string">&#x27;acc&#x27;</span> <span class="keyword">AND</span> password <span class="operator">=</span> <span class="string">&#x27;pwd&#x27;</span></span><br></pre></td></tr></table></figure>
<p>假如用户传入的账号为<code>&#39;or 1=1#</code>，后端并未过滤特殊字符，那么这条查询就出现了问题，此结果明显也能查出<code>count(*)</code>结果为<code>1</code>，<code>or</code>操作的<code>1=1</code>永远为<code>true</code>,<code>#</code>后边的内容则被注释掉了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> account <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="string">&#x27; AND password = &#x27;</span>pwd<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<p>甚至我们可以通过注入来<code>drop</code>表，同样通过传入不正常的账号<code>&#39;;DROP TABLE qqq#</code>，执行后<code>qqq</code>表即被<code>drop</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> user_info <span class="keyword">WHERE</span> account <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;<span class="keyword">DROP</span> <span class="keyword">TABLE</span> qweqwe#<span class="string">&#x27; AND password = &#x27;</span>pwd<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h2><h3 id="注入点探测"><a href="#注入点探测" class="headerlink" title="注入点探测"></a>注入点探测</h3><p>首先进行<code>SQL</code>注入点探测，通过适当的分析应用程序，可以判断什么地方存在SQL注入点。通常只要带有输入提交的动态网页，并且动态网页访问数据库，就可能存在SQL注入漏洞。如果此时后端使用拼接查询的方式执行<code>SQL</code>，那么就有可能被注入。  </p>
<h3 id="观察系统行为"><a href="#观察系统行为" class="headerlink" title="观察系统行为"></a>观察系统行为</h3><p>带内注入：观察后端是否将数据库错误信息向前端返回，从显示的错误消息中获取有关数据库的信息；使用<code>UNION ALL</code>将被盗信息与合法信息链接起来进行尝试，两者都是试错法，可以检测到错误。  </p>
<p>盲注入：推理注入，盲注入攻击不会直接从目标数据库中显示数据；相反，攻击者会仔细检查行为中的间接线索。<code>HTTP</code>响应中的详细信息，某些用户输入的空白网页以及数据库响应某些用户输入需要多长时间，这些都可以是线索，具体取决于攻击者的目标。  </p>
<p>带外注入：这种攻击有点复杂，攻击者会制作SQL语句，这些语句在呈现给数据库时会触发数据库系统创建与攻击者控制的外部服务器的连接。以这种方式，攻击者可以收集数据或可能控制数据库的行为。</p>
<h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p> 判断字段长度，判断字段回显位置，判断数据库信息，查找数据库表名，查找数据库表名，查找字段名，再根据这些信息构建注入<code>SQL</code>进行注入，登录后台，数据盗取，进行服务器提权等操作。</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><h3 id="分级管理"><a href="#分级管理" class="headerlink" title="分级管理"></a>分级管理</h3><p> 对用户进行分级管理，严格控制用户的权限，对于普通用户，禁止给予数据库建立、删除、修改等相关权限，只有系统管理员才具有增、删、改、查的权限。</p>
<h3 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h3><p>拦截正则表达式匹配的非正常的请求，例如<code>\s+(or|xor|and)\s+.*(=|&lt;|&gt;|&#39;|&quot;)</code>、<code>select.+(from|limit)</code>、<code>(?:(union(.*?)select))</code>、<code>(?:(?:current_)user|database|schema|connection_id)\s*\(</code>等等。  </p>
<h3 id="参数过滤"><a href="#参数过滤" class="headerlink" title="参数过滤"></a>参数过滤</h3><p>将提交的敏感字符进行过滤，例如<code>&#39;</code>、<code>&quot;</code>、<code>:</code>、<code>\</code>、<code>;</code>等等。</p>
<h3 id="变量检查"><a href="#变量检查" class="headerlink" title="变量检查"></a>变量检查</h3><p>确定变量的数据类型，例如对传入的<code>id</code>检测为<code>int</code>型，传入邮箱为严格的邮箱格式。</p>
<h3 id="隐藏错误"><a href="#隐藏错误" class="headerlink" title="隐藏错误"></a>隐藏错误</h3><p>避免直接向用户显示数据库错误，攻击者可以使用这些错误消息来获取有关数据库的信息。</p>
<h3 id="预编译语句集"><a href="#预编译语句集" class="headerlink" title="预编译语句集"></a>预编译语句集</h3><p>采用预编译语句集，它内置了处理<code>SQL</code>注入的能力，极大地提高了安全性。</p>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>对访问数据库的<code>Web</code>应用程序使用<code>Web</code>应用程序防火墙<code>WAF</code>，它可以帮助识别<code>SQL</code>注入尝试。</p>
<h3 id="定期检查"><a href="#定期检查" class="headerlink" title="定期检查"></a>定期检查</h3><p>定期测试与数据库交互的<code>Web</code>应用程序，且将数据库更新为最新的可用修补程序，防止旧版本的漏洞利用。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.touchczy.top/#/Browser/SQL%E6%B3%A8%E5%85%A5">https://blog.touchczy.top/#/Browser/SQL%E6%B3%A8%E5%85%A5</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS跨站脚本攻击</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h1 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h1><p>跨站脚本攻击<code>XSS</code>，是最普遍的<code>Web</code>应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul>
<li><p>反射型<code>XSS</code>： 攻击者事先制作好攻击链接,需要欺骗用户自己去点击链接才能触发<code>XSS</code>代码，所谓反射型<code>XSS</code>就是将恶意用户输入的<code>js</code>脚本，反射到浏览器执行。</p>
</li>
<li><p>存储型<code>XSS</code>：代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种<code>XSS</code>非常危险，容易造成蠕虫，大量盗窃<code>cookie</code>，也被称为持久型<code>XSS</code>。</p>
</li>
<li><p><code>DOM</code>型<code>XSS</code>：类似于反射型<code>XSS</code>，但这种<code>XSS</code>攻击的实现是通过对<code>DOM</code>树的修改而实现的。</p>
</li>
</ul>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>当动态页面中插入的内容含有这些特殊字符如<code>&lt;</code>时，用户浏览器会将其误认为是插入了<code>HTML</code>标签，当这些<code>HTML</code>标签引入了一段<code>JavaScript</code>脚本时，这些脚本程序就将会在用户浏览器中执行。当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生<code>XSS</code>漏洞。  </p>
<p>攻击者可以使用户在浏览器中执行其预定义的恶意脚本，劫持用户会话，插入恶意内容、重定向链接、使用恶意软件劫持用户浏览器等等。</p>
<p>基于反射型<code>XSS</code>漏洞，欺骗用户点击以执行<code>js</code>代码，可以盗取<code>cookie</code>等。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接将输入打印到页面，造成XSS</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$XssReflex</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;i&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$XssReflex</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造url，点击后就可以执行js代码 --&gt;</span></span><br><span class="line">http://127.0.0.1/xss.php?i=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&quot;run javascript&quot;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于存储型<code>XSS</code>漏洞，将<code>js</code>代码存储于服务器数据库中，服务器直接查询数据库数据显示到页面，即造成<code>XSS</code><br>最经典的存储型<code>XSS</code>漏洞是留言板，当用户A在留言板留言一段<code>JS</code>代码<code>&lt;script&gt;alert(&quot;run javascript&quot;);&lt;/script&gt;</code>,后端未经过滤直接存储到数据库，当正常用户浏览到他的留言后，这段<code>JS</code>代码就会被执行，可以借此来盗取<code>cookie</code>。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">恶意用户A <span class="comment">--&gt; 构造JS代码</span></span><br><span class="line">构造JS代码 <span class="comment">--&gt; 服务器数据库</span></span><br><span class="line">服务器数据库 <span class="comment">--&gt; 正常用户B显示页面</span></span><br><span class="line">服务器数据库 <span class="comment">--&gt; 正常用户C显示页面</span></span><br><span class="line">服务器数据库 <span class="comment">--&gt; 正常用户...显示页面</span></span><br><span class="line">正常用户B显示页面 <span class="comment">--&gt; 执行js盗取cookie</span></span><br><span class="line">正常用户C显示页面 <span class="comment">--&gt; 执行js盗取cookie</span></span><br><span class="line">正常用户...显示页面 <span class="comment">--&gt; 执行js盗取cookie</span></span><br></pre></td></tr></table></figure>

<p>基于<code>DOM</code>的型<code>XSS</code>漏洞类似于反射型<code>XSS</code>，但其变化多端，总之一句话，各种姿势，各种插，只要能执行我的<code>Js</code>  ，利用<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>等标签允许跨域请求资源。<br>经典案例是可以将标签写入到软件的意见反馈中，当管理员查看留言的反馈即触发<code>XSS</code>，传递<code>cookie</code>与后台管理地址后就可以登录到后台了。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;js_url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">appendChild(createElement(</span>&#x27;<span class="attr">script</span>&#x27;))<span class="attr">.src</span>=<span class="string">&#x27;js_url&#x27;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><ul>
<li>在用户提交参数前，将提交的字符<code>&lt;</code> 、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code> 、<code>&#39;</code> 、<code>+</code>、<code>/</code>等进行转义，严格控制输出。</li>
<li>将输入转化为小写对比<code>javascript:</code>，若匹配则过滤。</li>
<li>将<code>cookie</code>设置为<code>http-only</code>,<code>js</code>脚本将无法读取到<code>cookie</code>信息。</li>
<li>纯前端渲染，明确<code>innerText</code>、<code>setAttribute</code>、<code>style</code>，将代码与数据分隔开。</li>
<li>避免不可信的数据拼接到字符串中传递给这些<code>API</code>，如<code>DOM</code>中的内联事件监听器，<code>location</code>、<code>onclick</code>、<code>onerror</code>、<code>onload</code>、<code>onmouseover</code>等，<code>&lt;a&gt;</code>标签的<code>href</code>属性，<code>JavaScript</code>的<code>eval()</code>、<code>setTimeout()</code>、<code>setInterval()</code>等，都能把字符串作为代码运行。</li>
<li>对于不受信任的输入，都应该限定一个合理的长度。</li>
<li>严格的<code>CSP</code>,禁止加载外域代码，禁止外域提交，禁止内联脚本执行等较为严格的方式。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Cross-site_scripting">https://en.wikipedia.org/wiki/Cross-site_scripting</a></li>
<li><a href="https://blog.touchczy.top/#/Browser/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB">https://blog.touchczy.top/#/Browser/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB</a></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="markdown是什么"><a href="#markdown是什么" class="headerlink" title="markdown是什么"></a>markdown是什么</h2><ul>
<li>Markdown是一种轻量级标记语言</li>
<li>是程序员记笔记的基本工具</li>
<li>简单的语法就可以满足绝大多数记笔记的需求</li>
</ul>
<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>Markdown支持6种级别的标题，对应html标签 h1 ~ h6<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line"><span class="section">## h2</span></span><br><span class="line"><span class="section">### h3</span></span><br><span class="line"><span class="section">#### h4</span></span><br><span class="line"><span class="section">##### h5</span></span><br><span class="line"><span class="section">###### h6</span></span><br></pre></td></tr></table></figure>
<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6></li>
</ul>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字将被高亮显示...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这段文字将被高亮显示…</p>
</blockquote>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">点击跳转至百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span>)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com/">点击跳转至百度</a><br><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>无序列表使用*或+或-标识</li>
<li>有序列表使用数字加.标识，例如：1.<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 黄瓜</span><br><span class="line"><span class="bullet">*</span> 玉米</span><br><span class="line"><span class="bullet">*</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 黄瓜</span><br><span class="line"><span class="bullet">+</span> 玉米</span><br><span class="line"><span class="bullet">+</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 黄瓜</span><br><span class="line"><span class="bullet">-</span> 玉米</span><br><span class="line"><span class="bullet">-</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 黄瓜</span><br><span class="line"><span class="bullet">2.</span> 玉米</span><br><span class="line"><span class="bullet">3.</span> 茄子</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">---</span></span></span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*这里是斜体*</span></span><br><span class="line"><span class="emphasis">_这里是斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这里是加粗**</span></span><br><span class="line"><span class="strong">__这里是加粗__</span></span><br></pre></td></tr></table></figure>
<p><em>这里是斜体</em><br><em>这里是斜体</em></p>
<p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p>
<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><ul>
<li>使用两对反引号包裹<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```语言</span></span><br><span class="line"><span class="code">  代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```markdown</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:---:|:---:|:---:</span><br><span class="line">项目|项目一|项目二</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">表头</th>
<th align="center">条目一</th>
<th align="center">条目二</th>
</tr>
</thead>
<tbody><tr>
<td align="center">项目</td>
<td align="center">项目一</td>
<td align="center">项目二</td>
</tr>
</tbody></table>
<h3 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">直接写 html 元素就可以了</span><br><span class="line">&lt;span style=<span class="string">&quot;color:green&quot;</span>&gt;green&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p><span style="color:green">green</span></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ctrl+/ 可以进入或退出源码模式</span><br><span class="line">此外 markdown还可以输入数学符号 流程图 等功能</span><br><span class="line">但是并不常用这里就不展开了 自己可以百度搜索试一试</span><br><span class="line">一般我是用做的图片直接放过来</span><br></pre></td></tr></table></figure>

<h2 id="推荐使用-Typora"><a href="#推荐使用-Typora" class="headerlink" title="推荐使用 Typora"></a>推荐使用 Typora</h2><ul>
<li><code>Typora</code> 是一个编写 <code>markdown</code> 的软件</li>
<li>比如表格这个还是比较繁琐的 使用 <code>Typora</code> 直接右键就可以插入表格了</li>
<li>其次 <code>Typora</code> 是用 <code>electron</code> 开发的</li>
<li>所以他里面的样式 都可以使用前端的方式随便修改<ul>
<li>设置里面 高级设置 开启调试默认 </li>
<li><code>F12</code> 就可以看到调试工具了</li>
<li>设置 - 外观 - 打开主题文件夹</li>
<li>在根目录新建一个 <code>base.user.css</code></li>
<li>然后编写自己想修改的样式就可以了 </li>
</ul>
</li>
</ul>
<h2 id="Markdown-Viewer"><a href="#Markdown-Viewer" class="headerlink" title="Markdown Viewer"></a>Markdown Viewer</h2><ul>
<li>直接用浏览器打开 <code>.md</code> 文件</li>
<li>为了方便查看 我一般直接浏览器打开<code>.md</code>文件</li>
<li>谷歌商店直接下载就行 注意要翻墙</li>
<li><a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=chrome-ntp-icon">Markdown Viewer</a></li>
<li>然后 <code>chrome</code> 打开拓展程序的设置界面 找到 <code>Markdown Viewer</code></li>
<li>开启两项配置<ul>
<li>自动允许访问以下网站 =&gt; file:///*</li>
<li>允许访问文件网址 </li>
</ul>
</li>
<li>然后在 <code>chrome</code> 右上角点击 <code>Markdown Viewer</code>的图标<ul>
<li>自己设置下样式</li>
<li>除了 <code>compiler</code> 中的 <code>pedantic</code></li>
<li>其他全部勾选</li>
</ul>
</li>
<li>然后只要把 <code>.md</code>文件拖到 <code>chrome</code> 上就能直接预览了</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/superLiuYuanhua.github.io</url>
    <content><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* javascript */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* php */</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; python &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* java */</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c++ */</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* C# */</span><br><span class="line">Console.WriteLine(&quot;Hello World&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* golang */</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell <span class="comment">#</span></span></span><br><span class="line">echo &quot;Hello World&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">/* vbscript */</span><br><span class="line"><span class="built_in">MsgBox</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[ Lua ]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
